# Copyright 2022 ETH Zurich and University of Bologna.
# Solderpad Hardware License, Version 0.51, see LICENSE for details.
# SPDX-License-Identifier: SHL-0.51

# Author: Tim Fischer <fischeti@iis.ee.ethz.ch>
# Modified: Yannick Baumann <baumanny@student.ethz.ch>

variables:
  VSIM: 'questa-2022.3 vsim'
  VCS: 'vcs-2022.06 vcs'
  VLOGAN: 'vcs-2022.06 vlogan'

stages:
  - build
  - test

build_vsim:
  stage: build
  script:
    - make clean
    - make compile_questa VSIM="${VSIM}" WORK=work-vsim
  artifacts:
    expire_in: 1 week
    paths:
      - work-vsim

build_vsim_single_channel:
  stage: build
  script:
    - make clean
    - make compile_questa VSIM="${VSIM}" SINGLE_CHANNEL=1 WORK=work-vsim-single-channel
  artifacts:
    expire_in: 1 week
    paths:
      - work-vsim-single-channel

build_vcs_axi:
  stage: build
  script:
    - make clean
    - make bin/serial_link_axi.vcs TB_DUT=tb_axi_serial_link VCS="${VCS}" WORK=work-vcs
  artifacts:
    expire_in: 1 week
    paths:
      - bin/serial_link_axi.vcs*

build_vcs_ch_calib:
  stage: build
  script:
    - make clean
    - make bin/serial_link_ch_calib.vcs TB_DUT=tb_ch_calib_serial_link VCS="${VCS}" WORK=work-vcs
  artifacts:
    expire_in: 1 week
    paths:
      - bin/serial_link_ch_calib.vcs*

build_vcs_single_channel:
  stage: build
  script:
    - make clean
    - make bin/serial_link_single_channel.vcs TB_DUT=tb_axi_serial_link VCS="${VCS}" SINGLE_CHANNEL=1 WORK=work-vcs-single-channel
  artifacts:
    expire_in: 1 week
    paths:
      - bin/serial_link_single_channel.vcs*

run_vsim_floo_noc_bridge:
  stage: test
  needs:
    - build_vsim
  script:
    - echo "Running NoC_bridge test with R/W (narrow) [$NUM_NARR_R_1_W_2,$NUM_NARR_R_2_W_1] <-> [$NUM_NARR_R_2_W_1,$NUM_NARR_R_1_W_2] & R/W (wide) [$NUM_WIDE_R_1_W_2,$NUM_WIDE_R_2_W_1] <-> [$NUM_WIDE_R_2_W_1,$NUM_WIDE_R_1_W_2]"
    - make run TB_DUT=tb_floo_serial_link_narrow_wide WORK=work-vsim RUN_ARGS="+NUM_NARR_WRITES_1=$NUM_NARR_R_2_W_1 +NUM_NARR_READS_1=$NUM_NARR_R_1_W_2 +NUM_NARR_WRITES_2=$NUM_NARR_R_1_W_2 +NUM_NARR_READS_2=$NUM_NARR_R_2_W_1 +NUM_WIDE_WRITES_1=$NUM_WIDE_R_2_W_1 +NUM_WIDE_READS_1=$NUM_WIDE_R_1_W_2 +NUM_WIDE_WRITES_2=$NUM_WIDE_R_1_W_2 +NUM_WIDE_READS_2=$NUM_WIDE_R_2_W_1"
  variables:
    TEST_LENGTH: 1000
  parallel:
    matrix:
      - NUM_NARR_R_1_W_2: [0, $TEST_LENGTH]
        NUM_NARR_R_2_W_1: [0, $TEST_LENGTH]
        NUM_WIDE_R_1_W_2: [0, $TEST_LENGTH]
        NUM_WIDE_R_2_W_1: [0, $TEST_LENGTH]
  timeout: 15 minutes

run_vsim_axi:
  stage: test
  needs:
    - build_vsim
  script:
    - echo "Running AXI test with R/W [$NUM_READS_1,$NUM_WRITES_1] <-> [$NUM_READS_2,$NUM_WRITES_2]"
    - make run TB_DUT=tb_axi_serial_link WORK=work-vsim RUN_ARGS="+NUM_READS_1=$NUM_READS_1 +NUM_WRITES_1=$NUM_WRITES_1 +NUM_READS_2=$NUM_READS_2 +NUM_WRITES_2=$NUM_WRITES_2"
  variables:
    TEST_LENGTH: 1000
  parallel:
    matrix:
      - NUM_READS_1: [0, $TEST_LENGTH]
        NUM_WRITES_1: [0, $TEST_LENGTH]
        NUM_READS_2: [0, $TEST_LENGTH]
        NUM_WRITES_2: [0, $TEST_LENGTH]
  timeout: 15 minutes

run_vsim_ch_calib:
  stage: test
  needs:
    - build_vsim
  script:
    - echo "Running Channel Calibration test with [$NUM_FAULTS, $NUM_FAULTS]"
    - make run TB_DUT=tb_ch_calib_serial_link WORK=work-vsim RUN_ARGS="+NUM_FAULTS_1=$NUM_FAULTS +NUM_FAULTS_2=$NUM_FAULTS"
  parallel:
    matrix:
      - NUM_FAULTS: [0, 3, 7]
  timeout: 15 minutes

run_vsim_single_channel:
  stage: test
  needs:
    - build_vsim_single_channel
  script:
    - echo "Running test with single channel instance"
    - make run TB_DUT=tb_axi_serial_link WORK=work-vsim-single-channel
  timeout: 15 minutes

run_vcs_axi:
  stage: test
  needs:
    - build_vcs_axi
  script:
    - echo "Running AXI test with R/W [$NUM_READS_1,$NUM_WRITES_1] <-> [$NUM_READS_2,$NUM_WRITES_2]"
    - bin/serial_link_axi.vcs +permissive -exitstatus +NUM_READS_1=$NUM_READS_1 +NUM_WRITES_1=$NUM_WRITES_1 +NUM_READS_2=$NUM_READS_2 +NUM_WRITES_2=$NUM_WRITES_2 +permissive-off
  variables:
    TEST_LENGTH: 1000
  parallel:
    matrix:
      - NUM_READS_1: [0, $TEST_LENGTH]
        NUM_WRITES_1: [0, $TEST_LENGTH]
        NUM_READS_2: [0, $TEST_LENGTH]
        NUM_WRITES_2: [0, $TEST_LENGTH]
  timeout: 15 minutes

run_vcs_ch_calib:
  stage: test
  needs:
    - build_vcs_ch_calib
  script:
    - echo "Running Channel Calibration test with [$NUM_FAULTS, $NUM_FAULTS]"
    - bin/serial_link_ch_calib.vcs +permissive -exitstatus +NUM_FAULTS_1=$NUM_FAULTS +NUM_FAULTS_2=$NUM_FAULTS +permissive-off
  parallel:
    matrix:
      # TODO: Check why CI fails with 7 faults in VCS
      # - NUM_FAULTS: [0, 3, 7]
      - NUM_FAULTS: [0, 3]
  timeout: 15 minutes

run_vcs_single_channel:
  stage: test
  needs:
    - build_vcs_single_channel
  script:
    - echo "Running test with single channel instance"
    - bin/serial_link_single_channel.vcs
  timeout: 15 minutes
