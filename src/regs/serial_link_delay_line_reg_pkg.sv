// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package serial_link_delay_line_reg_pkg;

  // Param list
  parameter int NumChannels = 38;
  parameter int Log2NumChannels = 6;
  parameter int NumBits = 16;
  parameter int Log2MaxClkDiv = 10;
  parameter int FlushCounterWidth = 8;
  parameter int Log2RawModeTXFifoDepth = 3;

  // Address widths within the block
  parameter int BlockAw = 7;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
    } clk_ena;
    struct packed {
      logic        q;
    } reset_n;
    struct packed {
      logic        q;
    } axi_in_isolate;
    struct packed {
      logic        q;
    } axi_out_isolate;
  } serial_link_delay_line_reg2hw_ctrl_reg_t;

  typedef struct packed {
    logic        q;
  } serial_link_delay_line_reg2hw_raw_mode_en_reg_t;

  typedef struct packed {
    logic [5:0]  q;
  } serial_link_delay_line_reg2hw_raw_mode_in_ch_sel_reg_t;

  typedef struct packed {
    logic [15:0] q;
    logic        re;
  } serial_link_delay_line_reg2hw_raw_mode_in_data_reg_t;

  typedef struct packed {
    logic        q;
  } serial_link_delay_line_reg2hw_raw_mode_out_ch_mask_mreg_t;

  typedef struct packed {
    logic [15:0] q;
    logic        qe;
  } serial_link_delay_line_reg2hw_raw_mode_out_data_fifo_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } clear;
  } serial_link_delay_line_reg2hw_raw_mode_out_data_fifo_ctrl_reg_t;

  typedef struct packed {
    logic        q;
  } serial_link_delay_line_reg2hw_raw_mode_out_en_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } serial_link_delay_line_reg2hw_flow_control_fifo_clear_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } bypass_en;
    struct packed {
      logic        q;
    } auto_flush_en;
    struct packed {
      logic [7:0]  q;
    } auto_flush_count;
  } serial_link_delay_line_reg2hw_channel_alloc_tx_cfg_reg_t;

  typedef struct packed {
    logic        q;
  } serial_link_delay_line_reg2hw_channel_alloc_tx_ch_en_mreg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } clear;
    struct packed {
      logic        q;
      logic        qe;
    } flush;
  } serial_link_delay_line_reg2hw_channel_alloc_tx_ctrl_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } bypass_en;
    struct packed {
      logic        q;
    } auto_flush_en;
    struct packed {
      logic [7:0]  q;
    } auto_flush_count;
    struct packed {
      logic        q;
    } sync_en;
  } serial_link_delay_line_reg2hw_channel_alloc_rx_cfg_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } serial_link_delay_line_reg2hw_channel_alloc_rx_ctrl_reg_t;

  typedef struct packed {
    logic        q;
  } serial_link_delay_line_reg2hw_channel_alloc_rx_ch_en_mreg_t;

  typedef struct packed {
    logic [3:0]  q;
  } serial_link_delay_line_reg2hw_quadrature_clock_delay_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
    } axi_in;
    struct packed {
      logic        d;
    } axi_out;
  } serial_link_delay_line_hw2reg_isolated_reg_t;

  typedef struct packed {
    logic        d;
  } serial_link_delay_line_hw2reg_raw_mode_in_data_valid_mreg_t;

  typedef struct packed {
    logic [15:0] d;
  } serial_link_delay_line_hw2reg_raw_mode_in_data_reg_t;

  typedef struct packed {
    struct packed {
      logic [2:0]  d;
    } fill_state;
    struct packed {
      logic        d;
    } is_full;
  } serial_link_delay_line_hw2reg_raw_mode_out_data_fifo_ctrl_reg_t;

  // Register -> HW type
  typedef struct packed {
    serial_link_delay_line_reg2hw_ctrl_reg_t ctrl; // [194:191]
    serial_link_delay_line_reg2hw_raw_mode_en_reg_t raw_mode_en; // [190:190]
    serial_link_delay_line_reg2hw_raw_mode_in_ch_sel_reg_t raw_mode_in_ch_sel; // [189:184]
    serial_link_delay_line_reg2hw_raw_mode_in_data_reg_t raw_mode_in_data; // [183:167]
    serial_link_delay_line_reg2hw_raw_mode_out_ch_mask_mreg_t [37:0] raw_mode_out_ch_mask; // [166:129]
    serial_link_delay_line_reg2hw_raw_mode_out_data_fifo_reg_t raw_mode_out_data_fifo; // [128:112]
    serial_link_delay_line_reg2hw_raw_mode_out_data_fifo_ctrl_reg_t raw_mode_out_data_fifo_ctrl; // [111:110]
    serial_link_delay_line_reg2hw_raw_mode_out_en_reg_t raw_mode_out_en; // [109:109]
    serial_link_delay_line_reg2hw_flow_control_fifo_clear_reg_t flow_control_fifo_clear; // [108:107]
    serial_link_delay_line_reg2hw_channel_alloc_tx_cfg_reg_t channel_alloc_tx_cfg; // [106:97]
    serial_link_delay_line_reg2hw_channel_alloc_tx_ch_en_mreg_t [37:0] channel_alloc_tx_ch_en; // [96:59]
    serial_link_delay_line_reg2hw_channel_alloc_tx_ctrl_reg_t channel_alloc_tx_ctrl; // [58:55]
    serial_link_delay_line_reg2hw_channel_alloc_rx_cfg_reg_t channel_alloc_rx_cfg; // [54:44]
    serial_link_delay_line_reg2hw_channel_alloc_rx_ctrl_reg_t channel_alloc_rx_ctrl; // [43:42]
    serial_link_delay_line_reg2hw_channel_alloc_rx_ch_en_mreg_t [37:0] channel_alloc_rx_ch_en; // [41:4]
    serial_link_delay_line_reg2hw_quadrature_clock_delay_reg_t quadrature_clock_delay; // [3:0]
  } serial_link_delay_line_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    serial_link_delay_line_hw2reg_isolated_reg_t isolated; // [59:58]
    serial_link_delay_line_hw2reg_raw_mode_in_data_valid_mreg_t [37:0] raw_mode_in_data_valid; // [57:20]
    serial_link_delay_line_hw2reg_raw_mode_in_data_reg_t raw_mode_in_data; // [19:4]
    serial_link_delay_line_hw2reg_raw_mode_out_data_fifo_ctrl_reg_t raw_mode_out_data_fifo_ctrl; // [3:0]
  } serial_link_delay_line_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] SERIAL_LINK_DELAY_LINE_CTRL_OFFSET = 7'h 0;
  parameter logic [BlockAw-1:0] SERIAL_LINK_DELAY_LINE_ISOLATED_OFFSET = 7'h 4;
  parameter logic [BlockAw-1:0] SERIAL_LINK_DELAY_LINE_RAW_MODE_EN_OFFSET = 7'h 8;
  parameter logic [BlockAw-1:0] SERIAL_LINK_DELAY_LINE_RAW_MODE_IN_CH_SEL_OFFSET = 7'h c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_DELAY_LINE_RAW_MODE_IN_DATA_VALID_0_OFFSET = 7'h 10;
  parameter logic [BlockAw-1:0] SERIAL_LINK_DELAY_LINE_RAW_MODE_IN_DATA_VALID_1_OFFSET = 7'h 14;
  parameter logic [BlockAw-1:0] SERIAL_LINK_DELAY_LINE_RAW_MODE_IN_DATA_OFFSET = 7'h 18;
  parameter logic [BlockAw-1:0] SERIAL_LINK_DELAY_LINE_RAW_MODE_OUT_CH_MASK_0_OFFSET = 7'h 1c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_DELAY_LINE_RAW_MODE_OUT_CH_MASK_1_OFFSET = 7'h 20;
  parameter logic [BlockAw-1:0] SERIAL_LINK_DELAY_LINE_RAW_MODE_OUT_DATA_FIFO_OFFSET = 7'h 24;
  parameter logic [BlockAw-1:0] SERIAL_LINK_DELAY_LINE_RAW_MODE_OUT_DATA_FIFO_CTRL_OFFSET = 7'h 28;
  parameter logic [BlockAw-1:0] SERIAL_LINK_DELAY_LINE_RAW_MODE_OUT_EN_OFFSET = 7'h 2c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_DELAY_LINE_FLOW_CONTROL_FIFO_CLEAR_OFFSET = 7'h 30;
  parameter logic [BlockAw-1:0] SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_TX_CFG_OFFSET = 7'h 34;
  parameter logic [BlockAw-1:0] SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_TX_CH_EN_0_OFFSET = 7'h 38;
  parameter logic [BlockAw-1:0] SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_TX_CH_EN_1_OFFSET = 7'h 3c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_TX_CTRL_OFFSET = 7'h 40;
  parameter logic [BlockAw-1:0] SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_RX_CFG_OFFSET = 7'h 44;
  parameter logic [BlockAw-1:0] SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_RX_CTRL_OFFSET = 7'h 48;
  parameter logic [BlockAw-1:0] SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_RX_CH_EN_0_OFFSET = 7'h 4c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_RX_CH_EN_1_OFFSET = 7'h 50;
  parameter logic [BlockAw-1:0] SERIAL_LINK_DELAY_LINE_QUADRATURE_CLOCK_DELAY_OFFSET = 7'h 54;

  // Reset values for hwext registers and their fields
  parameter logic [1:0] SERIAL_LINK_DELAY_LINE_ISOLATED_RESVAL = 2'h 3;
  parameter logic [0:0] SERIAL_LINK_DELAY_LINE_ISOLATED_AXI_IN_RESVAL = 1'h 1;
  parameter logic [0:0] SERIAL_LINK_DELAY_LINE_ISOLATED_AXI_OUT_RESVAL = 1'h 1;
  parameter logic [31:0] SERIAL_LINK_DELAY_LINE_RAW_MODE_IN_DATA_VALID_0_RESVAL = 32'h 0;
  parameter logic [5:0] SERIAL_LINK_DELAY_LINE_RAW_MODE_IN_DATA_VALID_1_RESVAL = 6'h 0;
  parameter logic [15:0] SERIAL_LINK_DELAY_LINE_RAW_MODE_IN_DATA_RESVAL = 16'h 0;
  parameter logic [31:0] SERIAL_LINK_DELAY_LINE_RAW_MODE_OUT_DATA_FIFO_CTRL_RESVAL = 32'h 0;
  parameter logic [2:0] SERIAL_LINK_DELAY_LINE_RAW_MODE_OUT_DATA_FIFO_CTRL_FILL_STATE_RESVAL = 3'h 0;
  parameter logic [0:0] SERIAL_LINK_DELAY_LINE_RAW_MODE_OUT_DATA_FIFO_CTRL_IS_FULL_RESVAL = 1'h 0;
  parameter logic [0:0] SERIAL_LINK_DELAY_LINE_FLOW_CONTROL_FIFO_CLEAR_RESVAL = 1'h 0;
  parameter logic [0:0] SERIAL_LINK_DELAY_LINE_FLOW_CONTROL_FIFO_CLEAR_FLOW_CONTROL_FIFO_CLEAR_RESVAL = 1'h 0;
  parameter logic [1:0] SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_TX_CTRL_RESVAL = 2'h 0;
  parameter logic [0:0] SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_RX_CTRL_RESVAL = 1'h 0;

  // Register index
  typedef enum int {
    SERIAL_LINK_DELAY_LINE_CTRL,
    SERIAL_LINK_DELAY_LINE_ISOLATED,
    SERIAL_LINK_DELAY_LINE_RAW_MODE_EN,
    SERIAL_LINK_DELAY_LINE_RAW_MODE_IN_CH_SEL,
    SERIAL_LINK_DELAY_LINE_RAW_MODE_IN_DATA_VALID_0,
    SERIAL_LINK_DELAY_LINE_RAW_MODE_IN_DATA_VALID_1,
    SERIAL_LINK_DELAY_LINE_RAW_MODE_IN_DATA,
    SERIAL_LINK_DELAY_LINE_RAW_MODE_OUT_CH_MASK_0,
    SERIAL_LINK_DELAY_LINE_RAW_MODE_OUT_CH_MASK_1,
    SERIAL_LINK_DELAY_LINE_RAW_MODE_OUT_DATA_FIFO,
    SERIAL_LINK_DELAY_LINE_RAW_MODE_OUT_DATA_FIFO_CTRL,
    SERIAL_LINK_DELAY_LINE_RAW_MODE_OUT_EN,
    SERIAL_LINK_DELAY_LINE_FLOW_CONTROL_FIFO_CLEAR,
    SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_TX_CFG,
    SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_TX_CH_EN_0,
    SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_TX_CH_EN_1,
    SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_TX_CTRL,
    SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_RX_CFG,
    SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_RX_CTRL,
    SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_RX_CH_EN_0,
    SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_RX_CH_EN_1,
    SERIAL_LINK_DELAY_LINE_QUADRATURE_CLOCK_DELAY
  } serial_link_delay_line_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] SERIAL_LINK_DELAY_LINE_PERMIT [22] = '{
    4'b 0011, // index[ 0] SERIAL_LINK_DELAY_LINE_CTRL
    4'b 0001, // index[ 1] SERIAL_LINK_DELAY_LINE_ISOLATED
    4'b 0001, // index[ 2] SERIAL_LINK_DELAY_LINE_RAW_MODE_EN
    4'b 0001, // index[ 3] SERIAL_LINK_DELAY_LINE_RAW_MODE_IN_CH_SEL
    4'b 1111, // index[ 4] SERIAL_LINK_DELAY_LINE_RAW_MODE_IN_DATA_VALID_0
    4'b 0001, // index[ 5] SERIAL_LINK_DELAY_LINE_RAW_MODE_IN_DATA_VALID_1
    4'b 0011, // index[ 6] SERIAL_LINK_DELAY_LINE_RAW_MODE_IN_DATA
    4'b 1111, // index[ 7] SERIAL_LINK_DELAY_LINE_RAW_MODE_OUT_CH_MASK_0
    4'b 0001, // index[ 8] SERIAL_LINK_DELAY_LINE_RAW_MODE_OUT_CH_MASK_1
    4'b 0011, // index[ 9] SERIAL_LINK_DELAY_LINE_RAW_MODE_OUT_DATA_FIFO
    4'b 1111, // index[10] SERIAL_LINK_DELAY_LINE_RAW_MODE_OUT_DATA_FIFO_CTRL
    4'b 0001, // index[11] SERIAL_LINK_DELAY_LINE_RAW_MODE_OUT_EN
    4'b 0001, // index[12] SERIAL_LINK_DELAY_LINE_FLOW_CONTROL_FIFO_CLEAR
    4'b 0011, // index[13] SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_TX_CFG
    4'b 1111, // index[14] SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_TX_CH_EN_0
    4'b 0001, // index[15] SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_TX_CH_EN_1
    4'b 0001, // index[16] SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_TX_CTRL
    4'b 0111, // index[17] SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_RX_CFG
    4'b 0001, // index[18] SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_RX_CTRL
    4'b 1111, // index[19] SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_RX_CH_EN_0
    4'b 0001, // index[20] SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_RX_CH_EN_1
    4'b 0001  // index[21] SERIAL_LINK_DELAY_LINE_QUADRATURE_CLOCK_DELAY
  };

endpackage

