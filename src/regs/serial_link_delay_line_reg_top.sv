// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module serial_link_delay_line_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 7
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output serial_link_delay_line_reg_pkg::serial_link_delay_line_reg2hw_t reg2hw, // Write
  input  serial_link_delay_line_reg_pkg::serial_link_delay_line_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import serial_link_delay_line_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [BlockAw-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic ctrl_clk_ena_qs;
  logic ctrl_clk_ena_wd;
  logic ctrl_clk_ena_we;
  logic ctrl_reset_n_qs;
  logic ctrl_reset_n_wd;
  logic ctrl_reset_n_we;
  logic ctrl_axi_in_isolate_qs;
  logic ctrl_axi_in_isolate_wd;
  logic ctrl_axi_in_isolate_we;
  logic ctrl_axi_out_isolate_qs;
  logic ctrl_axi_out_isolate_wd;
  logic ctrl_axi_out_isolate_we;
  logic isolated_axi_in_qs;
  logic isolated_axi_in_re;
  logic isolated_axi_out_qs;
  logic isolated_axi_out_re;
  logic raw_mode_en_wd;
  logic raw_mode_en_we;
  logic [5:0] raw_mode_in_ch_sel_wd;
  logic raw_mode_in_ch_sel_we;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_0_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_0_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_1_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_1_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_2_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_2_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_3_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_3_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_4_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_4_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_5_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_5_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_6_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_6_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_7_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_7_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_8_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_8_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_9_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_9_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_10_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_10_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_11_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_11_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_12_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_12_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_13_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_13_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_14_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_14_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_15_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_15_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_16_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_16_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_17_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_17_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_18_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_18_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_19_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_19_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_20_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_20_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_21_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_21_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_22_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_22_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_23_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_23_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_24_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_24_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_25_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_25_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_26_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_26_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_27_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_27_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_28_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_28_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_29_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_29_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_30_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_30_re;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_31_qs;
  logic raw_mode_in_data_valid_0_raw_mode_in_data_valid_31_re;
  logic raw_mode_in_data_valid_1_raw_mode_in_data_valid_32_qs;
  logic raw_mode_in_data_valid_1_raw_mode_in_data_valid_32_re;
  logic raw_mode_in_data_valid_1_raw_mode_in_data_valid_33_qs;
  logic raw_mode_in_data_valid_1_raw_mode_in_data_valid_33_re;
  logic raw_mode_in_data_valid_1_raw_mode_in_data_valid_34_qs;
  logic raw_mode_in_data_valid_1_raw_mode_in_data_valid_34_re;
  logic raw_mode_in_data_valid_1_raw_mode_in_data_valid_35_qs;
  logic raw_mode_in_data_valid_1_raw_mode_in_data_valid_35_re;
  logic raw_mode_in_data_valid_1_raw_mode_in_data_valid_36_qs;
  logic raw_mode_in_data_valid_1_raw_mode_in_data_valid_36_re;
  logic raw_mode_in_data_valid_1_raw_mode_in_data_valid_37_qs;
  logic raw_mode_in_data_valid_1_raw_mode_in_data_valid_37_re;
  logic [15:0] raw_mode_in_data_qs;
  logic raw_mode_in_data_re;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_0_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_0_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_1_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_1_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_2_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_2_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_3_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_3_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_4_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_4_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_5_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_5_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_6_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_6_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_7_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_7_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_8_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_8_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_9_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_9_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_10_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_10_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_11_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_11_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_12_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_12_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_13_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_13_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_14_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_14_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_15_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_15_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_16_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_16_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_17_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_17_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_18_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_18_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_19_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_19_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_20_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_20_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_21_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_21_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_22_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_22_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_23_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_23_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_24_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_24_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_25_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_25_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_26_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_26_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_27_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_27_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_28_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_28_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_29_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_29_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_30_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_30_we;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_31_wd;
  logic raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_31_we;
  logic raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_32_wd;
  logic raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_32_we;
  logic raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_33_wd;
  logic raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_33_we;
  logic raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_34_wd;
  logic raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_34_we;
  logic raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_35_wd;
  logic raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_35_we;
  logic raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_36_wd;
  logic raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_36_we;
  logic raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_37_wd;
  logic raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_37_we;
  logic [15:0] raw_mode_out_data_fifo_wd;
  logic raw_mode_out_data_fifo_we;
  logic raw_mode_out_data_fifo_ctrl_clear_wd;
  logic raw_mode_out_data_fifo_ctrl_clear_we;
  logic [2:0] raw_mode_out_data_fifo_ctrl_fill_state_qs;
  logic raw_mode_out_data_fifo_ctrl_fill_state_re;
  logic raw_mode_out_data_fifo_ctrl_is_full_qs;
  logic raw_mode_out_data_fifo_ctrl_is_full_re;
  logic raw_mode_out_en_qs;
  logic raw_mode_out_en_wd;
  logic raw_mode_out_en_we;
  logic flow_control_fifo_clear_wd;
  logic flow_control_fifo_clear_we;
  logic channel_alloc_tx_cfg_bypass_en_qs;
  logic channel_alloc_tx_cfg_bypass_en_wd;
  logic channel_alloc_tx_cfg_bypass_en_we;
  logic channel_alloc_tx_cfg_auto_flush_en_qs;
  logic channel_alloc_tx_cfg_auto_flush_en_wd;
  logic channel_alloc_tx_cfg_auto_flush_en_we;
  logic [7:0] channel_alloc_tx_cfg_auto_flush_count_qs;
  logic [7:0] channel_alloc_tx_cfg_auto_flush_count_wd;
  logic channel_alloc_tx_cfg_auto_flush_count_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_0_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_0_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_0_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_1_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_1_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_1_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_2_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_2_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_2_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_3_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_3_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_3_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_4_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_4_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_4_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_5_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_5_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_5_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_6_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_6_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_6_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_7_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_7_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_7_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_8_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_8_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_8_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_9_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_9_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_9_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_10_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_10_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_10_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_11_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_11_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_11_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_12_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_12_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_12_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_13_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_13_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_13_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_14_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_14_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_14_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_15_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_15_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_15_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_16_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_16_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_16_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_17_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_17_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_17_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_18_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_18_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_18_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_19_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_19_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_19_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_20_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_20_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_20_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_21_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_21_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_21_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_22_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_22_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_22_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_23_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_23_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_23_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_24_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_24_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_24_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_25_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_25_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_25_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_26_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_26_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_26_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_27_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_27_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_27_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_28_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_28_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_28_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_29_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_29_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_29_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_30_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_30_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_30_we;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_31_qs;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_31_wd;
  logic channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_31_we;
  logic channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_32_qs;
  logic channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_32_wd;
  logic channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_32_we;
  logic channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_33_qs;
  logic channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_33_wd;
  logic channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_33_we;
  logic channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_34_qs;
  logic channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_34_wd;
  logic channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_34_we;
  logic channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_35_qs;
  logic channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_35_wd;
  logic channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_35_we;
  logic channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_36_qs;
  logic channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_36_wd;
  logic channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_36_we;
  logic channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_37_qs;
  logic channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_37_wd;
  logic channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_37_we;
  logic channel_alloc_tx_ctrl_clear_wd;
  logic channel_alloc_tx_ctrl_clear_we;
  logic channel_alloc_tx_ctrl_flush_wd;
  logic channel_alloc_tx_ctrl_flush_we;
  logic channel_alloc_rx_cfg_bypass_en_qs;
  logic channel_alloc_rx_cfg_bypass_en_wd;
  logic channel_alloc_rx_cfg_bypass_en_we;
  logic channel_alloc_rx_cfg_auto_flush_en_qs;
  logic channel_alloc_rx_cfg_auto_flush_en_wd;
  logic channel_alloc_rx_cfg_auto_flush_en_we;
  logic [7:0] channel_alloc_rx_cfg_auto_flush_count_qs;
  logic [7:0] channel_alloc_rx_cfg_auto_flush_count_wd;
  logic channel_alloc_rx_cfg_auto_flush_count_we;
  logic channel_alloc_rx_cfg_sync_en_qs;
  logic channel_alloc_rx_cfg_sync_en_wd;
  logic channel_alloc_rx_cfg_sync_en_we;
  logic channel_alloc_rx_ctrl_wd;
  logic channel_alloc_rx_ctrl_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_0_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_0_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_0_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_1_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_1_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_1_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_2_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_2_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_2_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_3_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_3_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_3_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_4_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_4_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_4_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_5_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_5_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_5_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_6_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_6_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_6_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_7_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_7_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_7_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_8_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_8_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_8_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_9_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_9_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_9_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_10_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_10_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_10_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_11_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_11_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_11_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_12_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_12_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_12_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_13_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_13_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_13_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_14_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_14_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_14_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_15_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_15_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_15_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_16_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_16_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_16_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_17_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_17_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_17_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_18_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_18_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_18_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_19_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_19_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_19_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_20_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_20_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_20_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_21_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_21_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_21_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_22_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_22_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_22_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_23_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_23_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_23_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_24_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_24_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_24_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_25_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_25_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_25_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_26_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_26_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_26_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_27_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_27_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_27_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_28_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_28_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_28_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_29_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_29_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_29_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_30_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_30_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_30_we;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_31_qs;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_31_wd;
  logic channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_31_we;
  logic channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_32_qs;
  logic channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_32_wd;
  logic channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_32_we;
  logic channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_33_qs;
  logic channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_33_wd;
  logic channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_33_we;
  logic channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_34_qs;
  logic channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_34_wd;
  logic channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_34_we;
  logic channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_35_qs;
  logic channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_35_wd;
  logic channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_35_we;
  logic channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_36_qs;
  logic channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_36_wd;
  logic channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_36_we;
  logic channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_37_qs;
  logic channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_37_wd;
  logic channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_37_we;
  logic [3:0] quadrature_clock_delay_wd;
  logic quadrature_clock_delay_we;

  // Register instances
  // R[ctrl]: V(False)

  //   F[clk_ena]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_clk_ena (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_clk_ena_we),
    .wd     (ctrl_clk_ena_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.clk_ena.q ),

    // to register interface (read)
    .qs     (ctrl_clk_ena_qs)
  );


  //   F[reset_n]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_ctrl_reset_n (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_reset_n_we),
    .wd     (ctrl_reset_n_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.reset_n.q ),

    // to register interface (read)
    .qs     (ctrl_reset_n_qs)
  );


  //   F[axi_in_isolate]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_ctrl_axi_in_isolate (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_axi_in_isolate_we),
    .wd     (ctrl_axi_in_isolate_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.axi_in_isolate.q ),

    // to register interface (read)
    .qs     (ctrl_axi_in_isolate_qs)
  );


  //   F[axi_out_isolate]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_ctrl_axi_out_isolate (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_axi_out_isolate_we),
    .wd     (ctrl_axi_out_isolate_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.axi_out_isolate.q ),

    // to register interface (read)
    .qs     (ctrl_axi_out_isolate_qs)
  );


  // R[isolated]: V(True)

  //   F[axi_in]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolated_axi_in (
    .re     (isolated_axi_in_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated.axi_in.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_axi_in_qs)
  );


  //   F[axi_out]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_isolated_axi_out (
    .re     (isolated_axi_out_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.isolated.axi_out.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (isolated_axi_out_qs)
  );


  // R[raw_mode_en]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_en_we),
    .wd     (raw_mode_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_en.q ),

    .qs     ()
  );


  // R[raw_mode_in_ch_sel]: V(False)

  prim_subreg #(
    .DW      (6),
    .SWACCESS("WO"),
    .RESVAL  (6'h0)
  ) u_raw_mode_in_ch_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_in_ch_sel_we),
    .wd     (raw_mode_in_ch_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_in_ch_sel.q ),

    .qs     ()
  );



  // Subregister 0 of Multireg raw_mode_in_data_valid
  // R[raw_mode_in_data_valid_0]: V(True)

  // F[raw_mode_in_data_valid_0]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_0 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_0_qs)
  );


  // F[raw_mode_in_data_valid_1]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_1 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_1_qs)
  );


  // F[raw_mode_in_data_valid_2]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_2 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[2].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_2_qs)
  );


  // F[raw_mode_in_data_valid_3]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_3 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[3].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_3_qs)
  );


  // F[raw_mode_in_data_valid_4]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_4 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_4_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[4].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_4_qs)
  );


  // F[raw_mode_in_data_valid_5]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_5 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_5_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[5].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_5_qs)
  );


  // F[raw_mode_in_data_valid_6]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_6 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_6_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[6].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_6_qs)
  );


  // F[raw_mode_in_data_valid_7]: 7:7
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_7 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_7_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[7].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_7_qs)
  );


  // F[raw_mode_in_data_valid_8]: 8:8
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_8 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_8_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[8].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_8_qs)
  );


  // F[raw_mode_in_data_valid_9]: 9:9
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_9 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_9_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[9].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_9_qs)
  );


  // F[raw_mode_in_data_valid_10]: 10:10
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_10 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_10_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[10].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_10_qs)
  );


  // F[raw_mode_in_data_valid_11]: 11:11
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_11 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_11_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[11].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_11_qs)
  );


  // F[raw_mode_in_data_valid_12]: 12:12
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_12 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_12_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[12].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_12_qs)
  );


  // F[raw_mode_in_data_valid_13]: 13:13
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_13 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_13_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[13].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_13_qs)
  );


  // F[raw_mode_in_data_valid_14]: 14:14
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_14 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_14_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[14].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_14_qs)
  );


  // F[raw_mode_in_data_valid_15]: 15:15
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_15 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_15_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[15].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_15_qs)
  );


  // F[raw_mode_in_data_valid_16]: 16:16
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_16 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_16_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[16].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_16_qs)
  );


  // F[raw_mode_in_data_valid_17]: 17:17
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_17 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_17_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[17].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_17_qs)
  );


  // F[raw_mode_in_data_valid_18]: 18:18
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_18 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_18_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[18].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_18_qs)
  );


  // F[raw_mode_in_data_valid_19]: 19:19
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_19 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_19_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[19].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_19_qs)
  );


  // F[raw_mode_in_data_valid_20]: 20:20
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_20 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_20_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[20].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_20_qs)
  );


  // F[raw_mode_in_data_valid_21]: 21:21
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_21 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_21_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[21].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_21_qs)
  );


  // F[raw_mode_in_data_valid_22]: 22:22
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_22 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_22_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[22].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_22_qs)
  );


  // F[raw_mode_in_data_valid_23]: 23:23
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_23 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_23_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[23].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_23_qs)
  );


  // F[raw_mode_in_data_valid_24]: 24:24
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_24 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_24_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[24].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_24_qs)
  );


  // F[raw_mode_in_data_valid_25]: 25:25
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_25 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_25_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[25].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_25_qs)
  );


  // F[raw_mode_in_data_valid_26]: 26:26
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_26 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_26_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[26].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_26_qs)
  );


  // F[raw_mode_in_data_valid_27]: 27:27
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_27 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_27_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[27].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_27_qs)
  );


  // F[raw_mode_in_data_valid_28]: 28:28
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_28 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_28_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[28].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_28_qs)
  );


  // F[raw_mode_in_data_valid_29]: 29:29
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_29 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_29_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[29].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_29_qs)
  );


  // F[raw_mode_in_data_valid_30]: 30:30
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_30 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_30_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[30].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_30_qs)
  );


  // F[raw_mode_in_data_valid_31]: 31:31
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_0_raw_mode_in_data_valid_31 (
    .re     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_31_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[31].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_0_raw_mode_in_data_valid_31_qs)
  );


  // Subregister 32 of Multireg raw_mode_in_data_valid
  // R[raw_mode_in_data_valid_1]: V(True)

  // F[raw_mode_in_data_valid_32]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_1_raw_mode_in_data_valid_32 (
    .re     (raw_mode_in_data_valid_1_raw_mode_in_data_valid_32_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[32].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_1_raw_mode_in_data_valid_32_qs)
  );


  // F[raw_mode_in_data_valid_33]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_1_raw_mode_in_data_valid_33 (
    .re     (raw_mode_in_data_valid_1_raw_mode_in_data_valid_33_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[33].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_1_raw_mode_in_data_valid_33_qs)
  );


  // F[raw_mode_in_data_valid_34]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_1_raw_mode_in_data_valid_34 (
    .re     (raw_mode_in_data_valid_1_raw_mode_in_data_valid_34_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[34].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_1_raw_mode_in_data_valid_34_qs)
  );


  // F[raw_mode_in_data_valid_35]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_1_raw_mode_in_data_valid_35 (
    .re     (raw_mode_in_data_valid_1_raw_mode_in_data_valid_35_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[35].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_1_raw_mode_in_data_valid_35_qs)
  );


  // F[raw_mode_in_data_valid_36]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_1_raw_mode_in_data_valid_36 (
    .re     (raw_mode_in_data_valid_1_raw_mode_in_data_valid_36_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[36].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_1_raw_mode_in_data_valid_36_qs)
  );


  // F[raw_mode_in_data_valid_37]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_in_data_valid_1_raw_mode_in_data_valid_37 (
    .re     (raw_mode_in_data_valid_1_raw_mode_in_data_valid_37_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data_valid[37].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_in_data_valid_1_raw_mode_in_data_valid_37_qs)
  );



  // R[raw_mode_in_data]: V(True)

  prim_subreg_ext #(
    .DW    (16)
  ) u_raw_mode_in_data (
    .re     (raw_mode_in_data_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_in_data.d),
    .qre    (reg2hw.raw_mode_in_data.re),
    .qe     (),
    .q      (reg2hw.raw_mode_in_data.q ),
    .qs     (raw_mode_in_data_qs)
  );



  // Subregister 0 of Multireg raw_mode_out_ch_mask
  // R[raw_mode_out_ch_mask_0]: V(False)

  // F[raw_mode_out_ch_mask_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_0_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[0].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_1_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[1].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_2_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[2].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_3_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[3].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_4_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[4].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_5_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[5].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_6_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[6].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_7_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[7].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_8]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_8_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[8].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_9]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_9_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[9].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_10]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_10_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[10].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_11]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_11_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[11].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_12]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_12_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[12].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_13]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_13_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[13].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_14]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_14_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[14].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_15]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_15_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[15].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_16]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_16_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[16].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_17]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_17_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[17].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_18]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_18_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[18].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_19]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_19_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[19].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_20]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_20_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[20].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_21]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_21_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[21].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_22]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_22_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[22].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_23]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_23_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[23].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_24]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_24_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[24].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_25]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_25_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[25].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_26]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_26_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[26].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_27]: 27:27
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_27_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[27].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_28]: 28:28
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_28_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[28].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_29]: 29:29
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_29_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[29].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_30]: 30:30
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_30_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[30].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_31]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_31_we),
    .wd     (raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[31].q ),

    .qs     ()
  );


  // Subregister 32 of Multireg raw_mode_out_ch_mask
  // R[raw_mode_out_ch_mask_1]: V(False)

  // F[raw_mode_out_ch_mask_32]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_32_we),
    .wd     (raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[32].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_33]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_33_we),
    .wd     (raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[33].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_34]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_34_we),
    .wd     (raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[34].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_35]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_35_we),
    .wd     (raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[35].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_36]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_36_we),
    .wd     (raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[36].q ),

    .qs     ()
  );


  // F[raw_mode_out_ch_mask_37]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_37_we),
    .wd     (raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_ch_mask[37].q ),

    .qs     ()
  );



  // R[raw_mode_out_data_fifo]: V(False)

  prim_subreg #(
    .DW      (16),
    .SWACCESS("WO"),
    .RESVAL  (16'h0)
  ) u_raw_mode_out_data_fifo (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_data_fifo_we),
    .wd     (raw_mode_out_data_fifo_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.raw_mode_out_data_fifo.qe),
    .q      (reg2hw.raw_mode_out_data_fifo.q ),

    .qs     ()
  );


  // R[raw_mode_out_data_fifo_ctrl]: V(True)

  //   F[clear]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_out_data_fifo_ctrl_clear (
    .re     (1'b0),
    .we     (raw_mode_out_data_fifo_ctrl_clear_we),
    .wd     (raw_mode_out_data_fifo_ctrl_clear_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.raw_mode_out_data_fifo_ctrl.clear.qe),
    .q      (reg2hw.raw_mode_out_data_fifo_ctrl.clear.q ),
    .qs     ()
  );


  //   F[fill_state]: 10:8
  prim_subreg_ext #(
    .DW    (3)
  ) u_raw_mode_out_data_fifo_ctrl_fill_state (
    .re     (raw_mode_out_data_fifo_ctrl_fill_state_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_out_data_fifo_ctrl.fill_state.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_out_data_fifo_ctrl_fill_state_qs)
  );


  //   F[is_full]: 31:31
  prim_subreg_ext #(
    .DW    (1)
  ) u_raw_mode_out_data_fifo_ctrl_is_full (
    .re     (raw_mode_out_data_fifo_ctrl_is_full_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.raw_mode_out_data_fifo_ctrl.is_full.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (raw_mode_out_data_fifo_ctrl_is_full_qs)
  );


  // R[raw_mode_out_en]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_raw_mode_out_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (raw_mode_out_en_we),
    .wd     (raw_mode_out_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.raw_mode_out_en.q ),

    // to register interface (read)
    .qs     (raw_mode_out_en_qs)
  );


  // R[flow_control_fifo_clear]: V(True)

  prim_subreg_ext #(
    .DW    (1)
  ) u_flow_control_fifo_clear (
    .re     (1'b0),
    .we     (flow_control_fifo_clear_we),
    .wd     (flow_control_fifo_clear_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.flow_control_fifo_clear.qe),
    .q      (reg2hw.flow_control_fifo_clear.q ),
    .qs     ()
  );


  // R[channel_alloc_tx_cfg]: V(False)

  //   F[bypass_en]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_cfg_bypass_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_cfg_bypass_en_we),
    .wd     (channel_alloc_tx_cfg_bypass_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_cfg.bypass_en.q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_cfg_bypass_en_qs)
  );


  //   F[auto_flush_en]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_cfg_auto_flush_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_cfg_auto_flush_en_we),
    .wd     (channel_alloc_tx_cfg_auto_flush_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_cfg.auto_flush_en.q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_cfg_auto_flush_en_qs)
  );


  //   F[auto_flush_count]: 15:8
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h2)
  ) u_channel_alloc_tx_cfg_auto_flush_count (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_cfg_auto_flush_count_we),
    .wd     (channel_alloc_tx_cfg_auto_flush_count_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_cfg.auto_flush_count.q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_cfg_auto_flush_count_qs)
  );



  // Subregister 0 of Multireg channel_alloc_tx_ch_en
  // R[channel_alloc_tx_ch_en_0]: V(False)

  // F[channel_alloc_tx_ch_en_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_0_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[0].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_0_qs)
  );


  // F[channel_alloc_tx_ch_en_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_1_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[1].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_1_qs)
  );


  // F[channel_alloc_tx_ch_en_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_2_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[2].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_2_qs)
  );


  // F[channel_alloc_tx_ch_en_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_3_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[3].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_3_qs)
  );


  // F[channel_alloc_tx_ch_en_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_4_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[4].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_4_qs)
  );


  // F[channel_alloc_tx_ch_en_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_5_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[5].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_5_qs)
  );


  // F[channel_alloc_tx_ch_en_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_6_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[6].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_6_qs)
  );


  // F[channel_alloc_tx_ch_en_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_7_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[7].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_7_qs)
  );


  // F[channel_alloc_tx_ch_en_8]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_8_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[8].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_8_qs)
  );


  // F[channel_alloc_tx_ch_en_9]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_9_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[9].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_9_qs)
  );


  // F[channel_alloc_tx_ch_en_10]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_10_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[10].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_10_qs)
  );


  // F[channel_alloc_tx_ch_en_11]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_11_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[11].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_11_qs)
  );


  // F[channel_alloc_tx_ch_en_12]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_12_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[12].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_12_qs)
  );


  // F[channel_alloc_tx_ch_en_13]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_13_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[13].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_13_qs)
  );


  // F[channel_alloc_tx_ch_en_14]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_14_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[14].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_14_qs)
  );


  // F[channel_alloc_tx_ch_en_15]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_15_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[15].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_15_qs)
  );


  // F[channel_alloc_tx_ch_en_16]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_16_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[16].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_16_qs)
  );


  // F[channel_alloc_tx_ch_en_17]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_17_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[17].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_17_qs)
  );


  // F[channel_alloc_tx_ch_en_18]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_18_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[18].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_18_qs)
  );


  // F[channel_alloc_tx_ch_en_19]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_19_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[19].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_19_qs)
  );


  // F[channel_alloc_tx_ch_en_20]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_20_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[20].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_20_qs)
  );


  // F[channel_alloc_tx_ch_en_21]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_21_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[21].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_21_qs)
  );


  // F[channel_alloc_tx_ch_en_22]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_22_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[22].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_22_qs)
  );


  // F[channel_alloc_tx_ch_en_23]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_23_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[23].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_23_qs)
  );


  // F[channel_alloc_tx_ch_en_24]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_24_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[24].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_24_qs)
  );


  // F[channel_alloc_tx_ch_en_25]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_25_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[25].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_25_qs)
  );


  // F[channel_alloc_tx_ch_en_26]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_26_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[26].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_26_qs)
  );


  // F[channel_alloc_tx_ch_en_27]: 27:27
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_27_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[27].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_27_qs)
  );


  // F[channel_alloc_tx_ch_en_28]: 28:28
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_28_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[28].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_28_qs)
  );


  // F[channel_alloc_tx_ch_en_29]: 29:29
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_29_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[29].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_29_qs)
  );


  // F[channel_alloc_tx_ch_en_30]: 30:30
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_30_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[30].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_30_qs)
  );


  // F[channel_alloc_tx_ch_en_31]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_31_we),
    .wd     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[31].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_31_qs)
  );


  // Subregister 32 of Multireg channel_alloc_tx_ch_en
  // R[channel_alloc_tx_ch_en_1]: V(False)

  // F[channel_alloc_tx_ch_en_32]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_32_we),
    .wd     (channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[32].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_32_qs)
  );


  // F[channel_alloc_tx_ch_en_33]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_33_we),
    .wd     (channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[33].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_33_qs)
  );


  // F[channel_alloc_tx_ch_en_34]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_34_we),
    .wd     (channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[34].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_34_qs)
  );


  // F[channel_alloc_tx_ch_en_35]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_35_we),
    .wd     (channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[35].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_35_qs)
  );


  // F[channel_alloc_tx_ch_en_36]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_36_we),
    .wd     (channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[36].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_36_qs)
  );


  // F[channel_alloc_tx_ch_en_37]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_37_we),
    .wd     (channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_tx_ch_en[37].q ),

    // to register interface (read)
    .qs     (channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_37_qs)
  );



  // R[channel_alloc_tx_ctrl]: V(True)

  //   F[clear]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_channel_alloc_tx_ctrl_clear (
    .re     (1'b0),
    .we     (channel_alloc_tx_ctrl_clear_we),
    .wd     (channel_alloc_tx_ctrl_clear_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.channel_alloc_tx_ctrl.clear.qe),
    .q      (reg2hw.channel_alloc_tx_ctrl.clear.q ),
    .qs     ()
  );


  //   F[flush]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_channel_alloc_tx_ctrl_flush (
    .re     (1'b0),
    .we     (channel_alloc_tx_ctrl_flush_we),
    .wd     (channel_alloc_tx_ctrl_flush_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.channel_alloc_tx_ctrl.flush.qe),
    .q      (reg2hw.channel_alloc_tx_ctrl.flush.q ),
    .qs     ()
  );


  // R[channel_alloc_rx_cfg]: V(False)

  //   F[bypass_en]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_cfg_bypass_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_cfg_bypass_en_we),
    .wd     (channel_alloc_rx_cfg_bypass_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_cfg.bypass_en.q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_cfg_bypass_en_qs)
  );


  //   F[auto_flush_en]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_cfg_auto_flush_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_cfg_auto_flush_en_we),
    .wd     (channel_alloc_rx_cfg_auto_flush_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_cfg.auto_flush_en.q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_cfg_auto_flush_en_qs)
  );


  //   F[auto_flush_count]: 15:8
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h2)
  ) u_channel_alloc_rx_cfg_auto_flush_count (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_cfg_auto_flush_count_we),
    .wd     (channel_alloc_rx_cfg_auto_flush_count_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_cfg.auto_flush_count.q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_cfg_auto_flush_count_qs)
  );


  //   F[sync_en]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_cfg_sync_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_cfg_sync_en_we),
    .wd     (channel_alloc_rx_cfg_sync_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_cfg.sync_en.q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_cfg_sync_en_qs)
  );


  // R[channel_alloc_rx_ctrl]: V(True)

  prim_subreg_ext #(
    .DW    (1)
  ) u_channel_alloc_rx_ctrl (
    .re     (1'b0),
    .we     (channel_alloc_rx_ctrl_we),
    .wd     (channel_alloc_rx_ctrl_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.channel_alloc_rx_ctrl.qe),
    .q      (reg2hw.channel_alloc_rx_ctrl.q ),
    .qs     ()
  );



  // Subregister 0 of Multireg channel_alloc_rx_ch_en
  // R[channel_alloc_rx_ch_en_0]: V(False)

  // F[channel_alloc_rx_ch_en_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_0_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[0].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_0_qs)
  );


  // F[channel_alloc_rx_ch_en_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_1_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[1].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_1_qs)
  );


  // F[channel_alloc_rx_ch_en_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_2_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[2].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_2_qs)
  );


  // F[channel_alloc_rx_ch_en_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_3_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[3].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_3_qs)
  );


  // F[channel_alloc_rx_ch_en_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_4_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[4].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_4_qs)
  );


  // F[channel_alloc_rx_ch_en_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_5_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[5].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_5_qs)
  );


  // F[channel_alloc_rx_ch_en_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_6_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[6].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_6_qs)
  );


  // F[channel_alloc_rx_ch_en_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_7_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[7].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_7_qs)
  );


  // F[channel_alloc_rx_ch_en_8]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_8_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[8].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_8_qs)
  );


  // F[channel_alloc_rx_ch_en_9]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_9_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[9].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_9_qs)
  );


  // F[channel_alloc_rx_ch_en_10]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_10_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[10].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_10_qs)
  );


  // F[channel_alloc_rx_ch_en_11]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_11_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[11].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_11_qs)
  );


  // F[channel_alloc_rx_ch_en_12]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_12_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[12].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_12_qs)
  );


  // F[channel_alloc_rx_ch_en_13]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_13_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[13].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_13_qs)
  );


  // F[channel_alloc_rx_ch_en_14]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_14_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[14].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_14_qs)
  );


  // F[channel_alloc_rx_ch_en_15]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_15_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[15].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_15_qs)
  );


  // F[channel_alloc_rx_ch_en_16]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_16_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[16].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_16_qs)
  );


  // F[channel_alloc_rx_ch_en_17]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_17_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[17].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_17_qs)
  );


  // F[channel_alloc_rx_ch_en_18]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_18_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[18].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_18_qs)
  );


  // F[channel_alloc_rx_ch_en_19]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_19_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[19].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_19_qs)
  );


  // F[channel_alloc_rx_ch_en_20]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_20_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[20].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_20_qs)
  );


  // F[channel_alloc_rx_ch_en_21]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_21_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[21].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_21_qs)
  );


  // F[channel_alloc_rx_ch_en_22]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_22_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[22].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_22_qs)
  );


  // F[channel_alloc_rx_ch_en_23]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_23_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[23].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_23_qs)
  );


  // F[channel_alloc_rx_ch_en_24]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_24_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[24].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_24_qs)
  );


  // F[channel_alloc_rx_ch_en_25]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_25_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[25].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_25_qs)
  );


  // F[channel_alloc_rx_ch_en_26]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_26_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[26].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_26_qs)
  );


  // F[channel_alloc_rx_ch_en_27]: 27:27
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_27_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[27].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_27_qs)
  );


  // F[channel_alloc_rx_ch_en_28]: 28:28
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_28_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[28].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_28_qs)
  );


  // F[channel_alloc_rx_ch_en_29]: 29:29
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_29_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[29].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_29_qs)
  );


  // F[channel_alloc_rx_ch_en_30]: 30:30
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_30_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[30].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_30_qs)
  );


  // F[channel_alloc_rx_ch_en_31]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_31_we),
    .wd     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[31].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_31_qs)
  );


  // Subregister 32 of Multireg channel_alloc_rx_ch_en
  // R[channel_alloc_rx_ch_en_1]: V(False)

  // F[channel_alloc_rx_ch_en_32]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_32_we),
    .wd     (channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[32].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_32_qs)
  );


  // F[channel_alloc_rx_ch_en_33]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_33_we),
    .wd     (channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[33].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_33_qs)
  );


  // F[channel_alloc_rx_ch_en_34]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_34_we),
    .wd     (channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[34].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_34_qs)
  );


  // F[channel_alloc_rx_ch_en_35]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_35_we),
    .wd     (channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[35].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_35_qs)
  );


  // F[channel_alloc_rx_ch_en_36]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_36_we),
    .wd     (channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[36].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_36_qs)
  );


  // F[channel_alloc_rx_ch_en_37]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_37_we),
    .wd     (channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.channel_alloc_rx_ch_en[37].q ),

    // to register interface (read)
    .qs     (channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_37_qs)
  );



  // R[quadrature_clock_delay]: V(False)

  prim_subreg #(
    .DW      (4),
    .SWACCESS("WO"),
    .RESVAL  (4'h8)
  ) u_quadrature_clock_delay (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (quadrature_clock_delay_we),
    .wd     (quadrature_clock_delay_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.quadrature_clock_delay.q ),

    .qs     ()
  );




  logic [21:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == SERIAL_LINK_DELAY_LINE_CTRL_OFFSET);
    addr_hit[ 1] = (reg_addr == SERIAL_LINK_DELAY_LINE_ISOLATED_OFFSET);
    addr_hit[ 2] = (reg_addr == SERIAL_LINK_DELAY_LINE_RAW_MODE_EN_OFFSET);
    addr_hit[ 3] = (reg_addr == SERIAL_LINK_DELAY_LINE_RAW_MODE_IN_CH_SEL_OFFSET);
    addr_hit[ 4] = (reg_addr == SERIAL_LINK_DELAY_LINE_RAW_MODE_IN_DATA_VALID_0_OFFSET);
    addr_hit[ 5] = (reg_addr == SERIAL_LINK_DELAY_LINE_RAW_MODE_IN_DATA_VALID_1_OFFSET);
    addr_hit[ 6] = (reg_addr == SERIAL_LINK_DELAY_LINE_RAW_MODE_IN_DATA_OFFSET);
    addr_hit[ 7] = (reg_addr == SERIAL_LINK_DELAY_LINE_RAW_MODE_OUT_CH_MASK_0_OFFSET);
    addr_hit[ 8] = (reg_addr == SERIAL_LINK_DELAY_LINE_RAW_MODE_OUT_CH_MASK_1_OFFSET);
    addr_hit[ 9] = (reg_addr == SERIAL_LINK_DELAY_LINE_RAW_MODE_OUT_DATA_FIFO_OFFSET);
    addr_hit[10] = (reg_addr == SERIAL_LINK_DELAY_LINE_RAW_MODE_OUT_DATA_FIFO_CTRL_OFFSET);
    addr_hit[11] = (reg_addr == SERIAL_LINK_DELAY_LINE_RAW_MODE_OUT_EN_OFFSET);
    addr_hit[12] = (reg_addr == SERIAL_LINK_DELAY_LINE_FLOW_CONTROL_FIFO_CLEAR_OFFSET);
    addr_hit[13] = (reg_addr == SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_TX_CFG_OFFSET);
    addr_hit[14] = (reg_addr == SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_TX_CH_EN_0_OFFSET);
    addr_hit[15] = (reg_addr == SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_TX_CH_EN_1_OFFSET);
    addr_hit[16] = (reg_addr == SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_TX_CTRL_OFFSET);
    addr_hit[17] = (reg_addr == SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_RX_CFG_OFFSET);
    addr_hit[18] = (reg_addr == SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_RX_CTRL_OFFSET);
    addr_hit[19] = (reg_addr == SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_RX_CH_EN_0_OFFSET);
    addr_hit[20] = (reg_addr == SERIAL_LINK_DELAY_LINE_CHANNEL_ALLOC_RX_CH_EN_1_OFFSET);
    addr_hit[21] = (reg_addr == SERIAL_LINK_DELAY_LINE_QUADRATURE_CLOCK_DELAY_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(SERIAL_LINK_DELAY_LINE_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(SERIAL_LINK_DELAY_LINE_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(SERIAL_LINK_DELAY_LINE_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(SERIAL_LINK_DELAY_LINE_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(SERIAL_LINK_DELAY_LINE_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(SERIAL_LINK_DELAY_LINE_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(SERIAL_LINK_DELAY_LINE_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(SERIAL_LINK_DELAY_LINE_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(SERIAL_LINK_DELAY_LINE_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(SERIAL_LINK_DELAY_LINE_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(SERIAL_LINK_DELAY_LINE_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(SERIAL_LINK_DELAY_LINE_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(SERIAL_LINK_DELAY_LINE_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(SERIAL_LINK_DELAY_LINE_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(SERIAL_LINK_DELAY_LINE_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(SERIAL_LINK_DELAY_LINE_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(SERIAL_LINK_DELAY_LINE_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(SERIAL_LINK_DELAY_LINE_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(SERIAL_LINK_DELAY_LINE_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(SERIAL_LINK_DELAY_LINE_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(SERIAL_LINK_DELAY_LINE_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(SERIAL_LINK_DELAY_LINE_PERMIT[21] & ~reg_be)))));
  end

  assign ctrl_clk_ena_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_clk_ena_wd = reg_wdata[0];

  assign ctrl_reset_n_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_reset_n_wd = reg_wdata[1];

  assign ctrl_axi_in_isolate_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_axi_in_isolate_wd = reg_wdata[8];

  assign ctrl_axi_out_isolate_we = addr_hit[0] & reg_we & !reg_error;
  assign ctrl_axi_out_isolate_wd = reg_wdata[9];

  assign isolated_axi_in_re = addr_hit[1] & reg_re & !reg_error;

  assign isolated_axi_out_re = addr_hit[1] & reg_re & !reg_error;

  assign raw_mode_en_we = addr_hit[2] & reg_we & !reg_error;
  assign raw_mode_en_wd = reg_wdata[0];

  assign raw_mode_in_ch_sel_we = addr_hit[3] & reg_we & !reg_error;
  assign raw_mode_in_ch_sel_wd = reg_wdata[5:0];

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_0_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_1_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_2_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_3_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_4_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_5_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_6_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_7_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_8_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_9_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_10_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_11_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_12_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_13_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_14_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_15_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_16_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_17_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_18_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_19_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_20_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_21_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_22_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_23_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_24_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_25_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_26_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_27_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_28_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_29_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_30_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_0_raw_mode_in_data_valid_31_re = addr_hit[4] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_1_raw_mode_in_data_valid_32_re = addr_hit[5] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_1_raw_mode_in_data_valid_33_re = addr_hit[5] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_1_raw_mode_in_data_valid_34_re = addr_hit[5] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_1_raw_mode_in_data_valid_35_re = addr_hit[5] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_1_raw_mode_in_data_valid_36_re = addr_hit[5] & reg_re & !reg_error;

  assign raw_mode_in_data_valid_1_raw_mode_in_data_valid_37_re = addr_hit[5] & reg_re & !reg_error;

  assign raw_mode_in_data_re = addr_hit[6] & reg_re & !reg_error;

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_0_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_0_wd = reg_wdata[0];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_1_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_1_wd = reg_wdata[1];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_2_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_2_wd = reg_wdata[2];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_3_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_3_wd = reg_wdata[3];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_4_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_4_wd = reg_wdata[4];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_5_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_5_wd = reg_wdata[5];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_6_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_6_wd = reg_wdata[6];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_7_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_7_wd = reg_wdata[7];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_8_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_8_wd = reg_wdata[8];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_9_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_9_wd = reg_wdata[9];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_10_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_10_wd = reg_wdata[10];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_11_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_11_wd = reg_wdata[11];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_12_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_12_wd = reg_wdata[12];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_13_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_13_wd = reg_wdata[13];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_14_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_14_wd = reg_wdata[14];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_15_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_15_wd = reg_wdata[15];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_16_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_16_wd = reg_wdata[16];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_17_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_17_wd = reg_wdata[17];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_18_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_18_wd = reg_wdata[18];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_19_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_19_wd = reg_wdata[19];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_20_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_20_wd = reg_wdata[20];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_21_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_21_wd = reg_wdata[21];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_22_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_22_wd = reg_wdata[22];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_23_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_23_wd = reg_wdata[23];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_24_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_24_wd = reg_wdata[24];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_25_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_25_wd = reg_wdata[25];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_26_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_26_wd = reg_wdata[26];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_27_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_27_wd = reg_wdata[27];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_28_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_28_wd = reg_wdata[28];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_29_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_29_wd = reg_wdata[29];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_30_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_30_wd = reg_wdata[30];

  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_31_we = addr_hit[7] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_0_raw_mode_out_ch_mask_31_wd = reg_wdata[31];

  assign raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_32_we = addr_hit[8] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_32_wd = reg_wdata[0];

  assign raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_33_we = addr_hit[8] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_33_wd = reg_wdata[1];

  assign raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_34_we = addr_hit[8] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_34_wd = reg_wdata[2];

  assign raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_35_we = addr_hit[8] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_35_wd = reg_wdata[3];

  assign raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_36_we = addr_hit[8] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_36_wd = reg_wdata[4];

  assign raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_37_we = addr_hit[8] & reg_we & !reg_error;
  assign raw_mode_out_ch_mask_1_raw_mode_out_ch_mask_37_wd = reg_wdata[5];

  assign raw_mode_out_data_fifo_we = addr_hit[9] & reg_we & !reg_error;
  assign raw_mode_out_data_fifo_wd = reg_wdata[15:0];

  assign raw_mode_out_data_fifo_ctrl_clear_we = addr_hit[10] & reg_we & !reg_error;
  assign raw_mode_out_data_fifo_ctrl_clear_wd = reg_wdata[0];

  assign raw_mode_out_data_fifo_ctrl_fill_state_re = addr_hit[10] & reg_re & !reg_error;

  assign raw_mode_out_data_fifo_ctrl_is_full_re = addr_hit[10] & reg_re & !reg_error;

  assign raw_mode_out_en_we = addr_hit[11] & reg_we & !reg_error;
  assign raw_mode_out_en_wd = reg_wdata[0];

  assign flow_control_fifo_clear_we = addr_hit[12] & reg_we & !reg_error;
  assign flow_control_fifo_clear_wd = reg_wdata[0];

  assign channel_alloc_tx_cfg_bypass_en_we = addr_hit[13] & reg_we & !reg_error;
  assign channel_alloc_tx_cfg_bypass_en_wd = reg_wdata[0];

  assign channel_alloc_tx_cfg_auto_flush_en_we = addr_hit[13] & reg_we & !reg_error;
  assign channel_alloc_tx_cfg_auto_flush_en_wd = reg_wdata[1];

  assign channel_alloc_tx_cfg_auto_flush_count_we = addr_hit[13] & reg_we & !reg_error;
  assign channel_alloc_tx_cfg_auto_flush_count_wd = reg_wdata[15:8];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_0_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_0_wd = reg_wdata[0];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_1_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_1_wd = reg_wdata[1];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_2_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_2_wd = reg_wdata[2];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_3_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_3_wd = reg_wdata[3];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_4_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_4_wd = reg_wdata[4];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_5_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_5_wd = reg_wdata[5];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_6_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_6_wd = reg_wdata[6];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_7_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_7_wd = reg_wdata[7];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_8_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_8_wd = reg_wdata[8];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_9_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_9_wd = reg_wdata[9];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_10_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_10_wd = reg_wdata[10];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_11_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_11_wd = reg_wdata[11];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_12_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_12_wd = reg_wdata[12];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_13_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_13_wd = reg_wdata[13];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_14_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_14_wd = reg_wdata[14];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_15_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_15_wd = reg_wdata[15];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_16_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_16_wd = reg_wdata[16];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_17_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_17_wd = reg_wdata[17];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_18_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_18_wd = reg_wdata[18];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_19_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_19_wd = reg_wdata[19];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_20_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_20_wd = reg_wdata[20];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_21_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_21_wd = reg_wdata[21];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_22_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_22_wd = reg_wdata[22];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_23_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_23_wd = reg_wdata[23];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_24_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_24_wd = reg_wdata[24];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_25_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_25_wd = reg_wdata[25];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_26_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_26_wd = reg_wdata[26];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_27_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_27_wd = reg_wdata[27];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_28_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_28_wd = reg_wdata[28];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_29_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_29_wd = reg_wdata[29];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_30_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_30_wd = reg_wdata[30];

  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_31_we = addr_hit[14] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_31_wd = reg_wdata[31];

  assign channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_32_we = addr_hit[15] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_32_wd = reg_wdata[0];

  assign channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_33_we = addr_hit[15] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_33_wd = reg_wdata[1];

  assign channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_34_we = addr_hit[15] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_34_wd = reg_wdata[2];

  assign channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_35_we = addr_hit[15] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_35_wd = reg_wdata[3];

  assign channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_36_we = addr_hit[15] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_36_wd = reg_wdata[4];

  assign channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_37_we = addr_hit[15] & reg_we & !reg_error;
  assign channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_37_wd = reg_wdata[5];

  assign channel_alloc_tx_ctrl_clear_we = addr_hit[16] & reg_we & !reg_error;
  assign channel_alloc_tx_ctrl_clear_wd = reg_wdata[0];

  assign channel_alloc_tx_ctrl_flush_we = addr_hit[16] & reg_we & !reg_error;
  assign channel_alloc_tx_ctrl_flush_wd = reg_wdata[1];

  assign channel_alloc_rx_cfg_bypass_en_we = addr_hit[17] & reg_we & !reg_error;
  assign channel_alloc_rx_cfg_bypass_en_wd = reg_wdata[0];

  assign channel_alloc_rx_cfg_auto_flush_en_we = addr_hit[17] & reg_we & !reg_error;
  assign channel_alloc_rx_cfg_auto_flush_en_wd = reg_wdata[1];

  assign channel_alloc_rx_cfg_auto_flush_count_we = addr_hit[17] & reg_we & !reg_error;
  assign channel_alloc_rx_cfg_auto_flush_count_wd = reg_wdata[15:8];

  assign channel_alloc_rx_cfg_sync_en_we = addr_hit[17] & reg_we & !reg_error;
  assign channel_alloc_rx_cfg_sync_en_wd = reg_wdata[16];

  assign channel_alloc_rx_ctrl_we = addr_hit[18] & reg_we & !reg_error;
  assign channel_alloc_rx_ctrl_wd = reg_wdata[0];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_0_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_0_wd = reg_wdata[0];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_1_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_1_wd = reg_wdata[1];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_2_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_2_wd = reg_wdata[2];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_3_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_3_wd = reg_wdata[3];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_4_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_4_wd = reg_wdata[4];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_5_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_5_wd = reg_wdata[5];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_6_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_6_wd = reg_wdata[6];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_7_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_7_wd = reg_wdata[7];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_8_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_8_wd = reg_wdata[8];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_9_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_9_wd = reg_wdata[9];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_10_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_10_wd = reg_wdata[10];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_11_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_11_wd = reg_wdata[11];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_12_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_12_wd = reg_wdata[12];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_13_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_13_wd = reg_wdata[13];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_14_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_14_wd = reg_wdata[14];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_15_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_15_wd = reg_wdata[15];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_16_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_16_wd = reg_wdata[16];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_17_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_17_wd = reg_wdata[17];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_18_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_18_wd = reg_wdata[18];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_19_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_19_wd = reg_wdata[19];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_20_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_20_wd = reg_wdata[20];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_21_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_21_wd = reg_wdata[21];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_22_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_22_wd = reg_wdata[22];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_23_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_23_wd = reg_wdata[23];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_24_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_24_wd = reg_wdata[24];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_25_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_25_wd = reg_wdata[25];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_26_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_26_wd = reg_wdata[26];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_27_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_27_wd = reg_wdata[27];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_28_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_28_wd = reg_wdata[28];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_29_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_29_wd = reg_wdata[29];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_30_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_30_wd = reg_wdata[30];

  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_31_we = addr_hit[19] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_31_wd = reg_wdata[31];

  assign channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_32_we = addr_hit[20] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_32_wd = reg_wdata[0];

  assign channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_33_we = addr_hit[20] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_33_wd = reg_wdata[1];

  assign channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_34_we = addr_hit[20] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_34_wd = reg_wdata[2];

  assign channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_35_we = addr_hit[20] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_35_wd = reg_wdata[3];

  assign channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_36_we = addr_hit[20] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_36_wd = reg_wdata[4];

  assign channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_37_we = addr_hit[20] & reg_we & !reg_error;
  assign channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_37_wd = reg_wdata[5];

  assign quadrature_clock_delay_we = addr_hit[21] & reg_we & !reg_error;
  assign quadrature_clock_delay_wd = reg_wdata[3:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = ctrl_clk_ena_qs;
        reg_rdata_next[1] = ctrl_reset_n_qs;
        reg_rdata_next[8] = ctrl_axi_in_isolate_qs;
        reg_rdata_next[9] = ctrl_axi_out_isolate_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = isolated_axi_in_qs;
        reg_rdata_next[1] = isolated_axi_out_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[5:0] = '0;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_0_qs;
        reg_rdata_next[1] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_1_qs;
        reg_rdata_next[2] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_2_qs;
        reg_rdata_next[3] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_3_qs;
        reg_rdata_next[4] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_4_qs;
        reg_rdata_next[5] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_5_qs;
        reg_rdata_next[6] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_6_qs;
        reg_rdata_next[7] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_7_qs;
        reg_rdata_next[8] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_8_qs;
        reg_rdata_next[9] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_9_qs;
        reg_rdata_next[10] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_10_qs;
        reg_rdata_next[11] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_11_qs;
        reg_rdata_next[12] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_12_qs;
        reg_rdata_next[13] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_13_qs;
        reg_rdata_next[14] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_14_qs;
        reg_rdata_next[15] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_15_qs;
        reg_rdata_next[16] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_16_qs;
        reg_rdata_next[17] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_17_qs;
        reg_rdata_next[18] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_18_qs;
        reg_rdata_next[19] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_19_qs;
        reg_rdata_next[20] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_20_qs;
        reg_rdata_next[21] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_21_qs;
        reg_rdata_next[22] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_22_qs;
        reg_rdata_next[23] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_23_qs;
        reg_rdata_next[24] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_24_qs;
        reg_rdata_next[25] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_25_qs;
        reg_rdata_next[26] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_26_qs;
        reg_rdata_next[27] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_27_qs;
        reg_rdata_next[28] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_28_qs;
        reg_rdata_next[29] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_29_qs;
        reg_rdata_next[30] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_30_qs;
        reg_rdata_next[31] = raw_mode_in_data_valid_0_raw_mode_in_data_valid_31_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = raw_mode_in_data_valid_1_raw_mode_in_data_valid_32_qs;
        reg_rdata_next[1] = raw_mode_in_data_valid_1_raw_mode_in_data_valid_33_qs;
        reg_rdata_next[2] = raw_mode_in_data_valid_1_raw_mode_in_data_valid_34_qs;
        reg_rdata_next[3] = raw_mode_in_data_valid_1_raw_mode_in_data_valid_35_qs;
        reg_rdata_next[4] = raw_mode_in_data_valid_1_raw_mode_in_data_valid_36_qs;
        reg_rdata_next[5] = raw_mode_in_data_valid_1_raw_mode_in_data_valid_37_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[15:0] = raw_mode_in_data_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
        reg_rdata_next[4] = '0;
        reg_rdata_next[5] = '0;
        reg_rdata_next[6] = '0;
        reg_rdata_next[7] = '0;
        reg_rdata_next[8] = '0;
        reg_rdata_next[9] = '0;
        reg_rdata_next[10] = '0;
        reg_rdata_next[11] = '0;
        reg_rdata_next[12] = '0;
        reg_rdata_next[13] = '0;
        reg_rdata_next[14] = '0;
        reg_rdata_next[15] = '0;
        reg_rdata_next[16] = '0;
        reg_rdata_next[17] = '0;
        reg_rdata_next[18] = '0;
        reg_rdata_next[19] = '0;
        reg_rdata_next[20] = '0;
        reg_rdata_next[21] = '0;
        reg_rdata_next[22] = '0;
        reg_rdata_next[23] = '0;
        reg_rdata_next[24] = '0;
        reg_rdata_next[25] = '0;
        reg_rdata_next[26] = '0;
        reg_rdata_next[27] = '0;
        reg_rdata_next[28] = '0;
        reg_rdata_next[29] = '0;
        reg_rdata_next[30] = '0;
        reg_rdata_next[31] = '0;
      end

      addr_hit[8]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
        reg_rdata_next[4] = '0;
        reg_rdata_next[5] = '0;
      end

      addr_hit[9]: begin
        reg_rdata_next[15:0] = '0;
      end

      addr_hit[10]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[10:8] = raw_mode_out_data_fifo_ctrl_fill_state_qs;
        reg_rdata_next[31] = raw_mode_out_data_fifo_ctrl_is_full_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[0] = raw_mode_out_en_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[0] = '0;
      end

      addr_hit[13]: begin
        reg_rdata_next[0] = channel_alloc_tx_cfg_bypass_en_qs;
        reg_rdata_next[1] = channel_alloc_tx_cfg_auto_flush_en_qs;
        reg_rdata_next[15:8] = channel_alloc_tx_cfg_auto_flush_count_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[0] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_0_qs;
        reg_rdata_next[1] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_1_qs;
        reg_rdata_next[2] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_2_qs;
        reg_rdata_next[3] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_3_qs;
        reg_rdata_next[4] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_4_qs;
        reg_rdata_next[5] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_5_qs;
        reg_rdata_next[6] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_6_qs;
        reg_rdata_next[7] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_7_qs;
        reg_rdata_next[8] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_8_qs;
        reg_rdata_next[9] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_9_qs;
        reg_rdata_next[10] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_10_qs;
        reg_rdata_next[11] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_11_qs;
        reg_rdata_next[12] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_12_qs;
        reg_rdata_next[13] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_13_qs;
        reg_rdata_next[14] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_14_qs;
        reg_rdata_next[15] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_15_qs;
        reg_rdata_next[16] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_16_qs;
        reg_rdata_next[17] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_17_qs;
        reg_rdata_next[18] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_18_qs;
        reg_rdata_next[19] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_19_qs;
        reg_rdata_next[20] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_20_qs;
        reg_rdata_next[21] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_21_qs;
        reg_rdata_next[22] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_22_qs;
        reg_rdata_next[23] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_23_qs;
        reg_rdata_next[24] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_24_qs;
        reg_rdata_next[25] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_25_qs;
        reg_rdata_next[26] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_26_qs;
        reg_rdata_next[27] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_27_qs;
        reg_rdata_next[28] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_28_qs;
        reg_rdata_next[29] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_29_qs;
        reg_rdata_next[30] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_30_qs;
        reg_rdata_next[31] = channel_alloc_tx_ch_en_0_channel_alloc_tx_ch_en_31_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[0] = channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_32_qs;
        reg_rdata_next[1] = channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_33_qs;
        reg_rdata_next[2] = channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_34_qs;
        reg_rdata_next[3] = channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_35_qs;
        reg_rdata_next[4] = channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_36_qs;
        reg_rdata_next[5] = channel_alloc_tx_ch_en_1_channel_alloc_tx_ch_en_37_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
      end

      addr_hit[17]: begin
        reg_rdata_next[0] = channel_alloc_rx_cfg_bypass_en_qs;
        reg_rdata_next[1] = channel_alloc_rx_cfg_auto_flush_en_qs;
        reg_rdata_next[15:8] = channel_alloc_rx_cfg_auto_flush_count_qs;
        reg_rdata_next[16] = channel_alloc_rx_cfg_sync_en_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[0] = '0;
      end

      addr_hit[19]: begin
        reg_rdata_next[0] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_0_qs;
        reg_rdata_next[1] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_1_qs;
        reg_rdata_next[2] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_2_qs;
        reg_rdata_next[3] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_3_qs;
        reg_rdata_next[4] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_4_qs;
        reg_rdata_next[5] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_5_qs;
        reg_rdata_next[6] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_6_qs;
        reg_rdata_next[7] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_7_qs;
        reg_rdata_next[8] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_8_qs;
        reg_rdata_next[9] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_9_qs;
        reg_rdata_next[10] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_10_qs;
        reg_rdata_next[11] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_11_qs;
        reg_rdata_next[12] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_12_qs;
        reg_rdata_next[13] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_13_qs;
        reg_rdata_next[14] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_14_qs;
        reg_rdata_next[15] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_15_qs;
        reg_rdata_next[16] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_16_qs;
        reg_rdata_next[17] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_17_qs;
        reg_rdata_next[18] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_18_qs;
        reg_rdata_next[19] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_19_qs;
        reg_rdata_next[20] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_20_qs;
        reg_rdata_next[21] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_21_qs;
        reg_rdata_next[22] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_22_qs;
        reg_rdata_next[23] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_23_qs;
        reg_rdata_next[24] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_24_qs;
        reg_rdata_next[25] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_25_qs;
        reg_rdata_next[26] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_26_qs;
        reg_rdata_next[27] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_27_qs;
        reg_rdata_next[28] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_28_qs;
        reg_rdata_next[29] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_29_qs;
        reg_rdata_next[30] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_30_qs;
        reg_rdata_next[31] = channel_alloc_rx_ch_en_0_channel_alloc_rx_ch_en_31_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[0] = channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_32_qs;
        reg_rdata_next[1] = channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_33_qs;
        reg_rdata_next[2] = channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_34_qs;
        reg_rdata_next[3] = channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_35_qs;
        reg_rdata_next[4] = channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_36_qs;
        reg_rdata_next[5] = channel_alloc_rx_ch_en_1_channel_alloc_rx_ch_en_37_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[3:0] = '0;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module serial_link_delay_line_reg_top_intf
#(
  parameter int AW = 7,
  localparam int DW = 32
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output serial_link_delay_line_reg_pkg::serial_link_delay_line_reg2hw_t reg2hw, // Write
  input  serial_link_delay_line_reg_pkg::serial_link_delay_line_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  serial_link_delay_line_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


