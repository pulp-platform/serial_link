// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module serial_link_reg (
        input wire clk,
        input wire arst_n,

        input wire s_apb_psel,
        input wire s_apb_penable,
        input wire s_apb_pwrite,
        input wire [2:0] s_apb_pprot,
        input wire [10:0] s_apb_paddr,
        input wire [31:0] s_apb_pwdata,
        input wire [3:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [31:0] s_apb_prdata,
        output logic s_apb_pslverr,

        input serial_link_reg_pkg::serial_link_reg__in_t hwif_in,
        output serial_link_reg_pkg::serial_link_reg__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [10:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    // Request
    logic is_active;
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            is_active <= '0;
            cpuif_req <= '0;
            cpuif_req_is_wr <= '0;
            cpuif_addr <= '0;
            cpuif_wr_data <= '0;
            cpuif_wr_biten <= '0;
        end else begin
            if(~is_active) begin
                if(s_apb_psel) begin
                    is_active <= '1;
                    cpuif_req <= '1;
                    cpuif_req_is_wr <= s_apb_pwrite;
                    cpuif_addr <= {s_apb_paddr[10:2], 2'b0};
                    cpuif_wr_data <= s_apb_pwdata;
                    for(int i=0; i<4; i++) begin
                        cpuif_wr_biten[i*8 +: 8] <= {8{s_apb_pstrb[i]}};
                    end
                end
            end else begin
                cpuif_req <= '0;
                if(cpuif_rd_ack || cpuif_wr_ack) begin
                    is_active <= '0;
                end
            end
        end
    end

    // Response
    assign s_apb_pready = cpuif_rd_ack | cpuif_wr_ack;
    assign s_apb_prdata = cpuif_rd_data;
    assign s_apb_pslverr = cpuif_rd_err | cpuif_wr_err;

    logic cpuif_req_masked;
    logic external_req;
    logic external_pending;
    logic external_wr_ack;
    logic external_rd_ack;
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            external_pending <= '0;
        end else begin
            if(external_req & ~external_wr_ack & ~external_rd_ack) external_pending <= '1;
            else if(external_wr_ack | external_rd_ack) external_pending <= '0;
            `ifndef SYNTHESIS
                assert(!external_wr_ack || (external_pending | external_req))
                    else $error("An external wr_ack strobe was asserted when no external request was active");
                assert(!external_rd_ack || (external_pending | external_req))
                    else $error("An external rd_ack strobe was asserted when no external request was active");
            `endif
        end
    end

    // Read & write latencies are balanced. Stalls not required
    // except if external
    assign cpuif_req_stall_rd = external_pending;
    assign cpuif_req_stall_wr = external_pending;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            logic CTRL;
            logic ISOLATED;
            logic TX_PHY_CLK_DIV[38];
            logic TX_PHY_CLK_START[38];
            logic TX_PHY_CLK_END[38];
            logic RAW_MODE_EN;
            logic RAW_MODE_IN_CH_SEL;
            logic RAW_MODE_IN_DATA_VALID[38];
            logic RAW_MODE_IN_DATA;
            logic RAW_MODE_OUT_CH_MASK[38];
            logic RAW_MODE_OUT_DATA_FIFO;
            logic RAW_MODE_OUT_DATA_FIFO_CTRL;
            logic RAW_MODE_OUT_EN;
            logic FLOW_CONTROL_FIFO_CLEAR;
            logic CHANNEL_ALLOC_TX_CFG;
            logic CHANNEL_ALLOC_TX_CH_EN[38];
            logic CHANNEL_ALLOC_TX_CTRL;
            logic CHANNEL_ALLOC_RX_CFG;
            logic CHANNEL_ALLOC_RX_CTRL;
            logic CHANNEL_ALLOC_RX_CH_EN[38];
        } serial_link;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_strb_is_external;

    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        automatic logic is_external;
        is_external = '0;
        decoded_reg_strb.serial_link.CTRL = cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__CTRL__OFFSET);
        decoded_reg_strb.serial_link.ISOLATED = cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__ISOLATED__OFFSET);
        is_external |= cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__ISOLATED__OFFSET) & !cpuif_req_is_wr;
        for(int i0=0; i0<38; i0++) begin
            decoded_reg_strb.serial_link.TX_PHY_CLK_DIV[i0] = cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__TX_PHY_CLK_DIV__OFFSET + (11)'(i0) * 11'h4);
        end
        for(int i0=0; i0<38; i0++) begin
            decoded_reg_strb.serial_link.TX_PHY_CLK_START[i0] = cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__TX_PHY_CLK_START__OFFSET + (11)'(i0) * 11'h4);
        end
        for(int i0=0; i0<38; i0++) begin
            decoded_reg_strb.serial_link.TX_PHY_CLK_END[i0] = cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__TX_PHY_CLK_END__OFFSET + (11)'(i0) * 11'h4);
        end
        decoded_reg_strb.serial_link.RAW_MODE_EN = cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__RAW_MODE_EN__OFFSET);
        decoded_reg_strb.serial_link.RAW_MODE_IN_CH_SEL = cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__RAW_MODE_IN_CH_SEL__OFFSET);
        for(int i0=0; i0<38; i0++) begin
            decoded_reg_strb.serial_link.RAW_MODE_IN_DATA_VALID[i0] = cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__RAW_MODE_IN_DATA_VALID__OFFSET + (11)'(i0) * 11'h4);
            is_external |= cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__RAW_MODE_IN_DATA_VALID__OFFSET + (11)'(i0) * 11'h4) & !cpuif_req_is_wr;
        end
        decoded_reg_strb.serial_link.RAW_MODE_IN_DATA = cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__RAW_MODE_IN_DATA__OFFSET);
        is_external |= cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__RAW_MODE_IN_DATA__OFFSET) & !cpuif_req_is_wr;
        for(int i0=0; i0<38; i0++) begin
            decoded_reg_strb.serial_link.RAW_MODE_OUT_CH_MASK[i0] = cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__RAW_MODE_OUT_CH_MASK__OFFSET + (11)'(i0) * 11'h4);
        end
        decoded_reg_strb.serial_link.RAW_MODE_OUT_DATA_FIFO = cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__RAW_MODE_OUT_DATA_FIFO__OFFSET);
        decoded_reg_strb.serial_link.RAW_MODE_OUT_DATA_FIFO_CTRL = cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__RAW_MODE_OUT_DATA_FIFO_CTRL__OFFSET);
        is_external |= cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__RAW_MODE_OUT_DATA_FIFO_CTRL__OFFSET);
        decoded_reg_strb.serial_link.RAW_MODE_OUT_EN = cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__RAW_MODE_OUT_EN__OFFSET);
        decoded_reg_strb.serial_link.FLOW_CONTROL_FIFO_CLEAR = cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__FLOW_CONTROL_FIFO_CLEAR__OFFSET);
        is_external |= cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__FLOW_CONTROL_FIFO_CLEAR__OFFSET) & cpuif_req_is_wr;
        decoded_reg_strb.serial_link.CHANNEL_ALLOC_TX_CFG = cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__CHANNEL_ALLOC_TX_CFG__OFFSET);
        for(int i0=0; i0<38; i0++) begin
            decoded_reg_strb.serial_link.CHANNEL_ALLOC_TX_CH_EN[i0] = cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__CHANNEL_ALLOC_TX_CH_EN__OFFSET + (11)'(i0) * 11'h4);
        end
        decoded_reg_strb.serial_link.CHANNEL_ALLOC_TX_CTRL = cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__CHANNEL_ALLOC_TX_CTRL__OFFSET);
        is_external |= cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__CHANNEL_ALLOC_TX_CTRL__OFFSET) & cpuif_req_is_wr;
        decoded_reg_strb.serial_link.CHANNEL_ALLOC_RX_CFG = cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__CHANNEL_ALLOC_RX_CFG__OFFSET);
        decoded_reg_strb.serial_link.CHANNEL_ALLOC_RX_CTRL = cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__CHANNEL_ALLOC_RX_CTRL__OFFSET);
        is_external |= cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__CHANNEL_ALLOC_RX_CTRL__OFFSET) & cpuif_req_is_wr;
        for(int i0=0; i0<38; i0++) begin
            decoded_reg_strb.serial_link.CHANNEL_ALLOC_RX_CH_EN[i0] = cpuif_req_masked & (cpuif_addr == serial_link_reg_pkg::SERIAL_LINK_REG__SERIAL_LINK__CHANNEL_ALLOC_RX_CH_EN__OFFSET + (11)'(i0) * 11'h4);
        end
        decoded_strb_is_external = is_external;
        external_req = is_external;
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                struct {
                    logic next;
                    logic load_next;
                } clk_ena;
                struct {
                    logic next;
                    logic load_next;
                } reset_n;
                struct {
                    logic next;
                    logic load_next;
                } axi_in_isolate;
                struct {
                    logic next;
                    logic load_next;
                } axi_out_isolate;
            } CTRL;
            struct {
                struct {
                    logic [10:0] next;
                    logic load_next;
                } clk_divs;
            } TX_PHY_CLK_DIV[38];
            struct {
                struct {
                    logic [10:0] next;
                    logic load_next;
                } clk_divs;
            } TX_PHY_CLK_START[38];
            struct {
                struct {
                    logic [10:0] next;
                    logic load_next;
                } clk_shift_end;
            } TX_PHY_CLK_END[38];
            struct {
                struct {
                    logic next;
                    logic load_next;
                } raw_mode_en;
            } RAW_MODE_EN;
            struct {
                struct {
                    logic [5:0] next;
                    logic load_next;
                } raw_mode_in_ch_sel;
            } RAW_MODE_IN_CH_SEL;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } raw_mode_out_ch_mask;
            } RAW_MODE_OUT_CH_MASK[38];
            struct {
                struct {
                    logic [15:0] next;
                    logic load_next;
                } raw_mode_out_data_fifo;
            } RAW_MODE_OUT_DATA_FIFO;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } raw_mode_out_en;
            } RAW_MODE_OUT_EN;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } bypass_en;
                struct {
                    logic next;
                    logic load_next;
                } auto_flush_en;
                struct {
                    logic [7:0] next;
                    logic load_next;
                } auto_flush_count;
            } CHANNEL_ALLOC_TX_CFG;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } channel_alloc_tx_ch_en;
            } CHANNEL_ALLOC_TX_CH_EN[38];
            struct {
                struct {
                    logic next;
                    logic load_next;
                } bypass_en;
                struct {
                    logic next;
                    logic load_next;
                } auto_flush_en;
                struct {
                    logic [7:0] next;
                    logic load_next;
                } auto_flush_count;
                struct {
                    logic next;
                    logic load_next;
                } sync_en;
            } CHANNEL_ALLOC_RX_CFG;
            struct {
                struct {
                    logic next;
                    logic load_next;
                } channel_alloc_rx_ch_en;
            } CHANNEL_ALLOC_RX_CH_EN[38];
        } serial_link;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                struct {
                    logic value;
                } clk_ena;
                struct {
                    logic value;
                } reset_n;
                struct {
                    logic value;
                } axi_in_isolate;
                struct {
                    logic value;
                } axi_out_isolate;
            } CTRL;
            struct {
                struct {
                    logic [10:0] value;
                } clk_divs;
            } TX_PHY_CLK_DIV[38];
            struct {
                struct {
                    logic [10:0] value;
                } clk_divs;
            } TX_PHY_CLK_START[38];
            struct {
                struct {
                    logic [10:0] value;
                } clk_shift_end;
            } TX_PHY_CLK_END[38];
            struct {
                struct {
                    logic value;
                } raw_mode_en;
            } RAW_MODE_EN;
            struct {
                struct {
                    logic [5:0] value;
                } raw_mode_in_ch_sel;
            } RAW_MODE_IN_CH_SEL;
            struct {
                struct {
                    logic value;
                } raw_mode_out_ch_mask;
            } RAW_MODE_OUT_CH_MASK[38];
            struct {
                struct {
                    logic [15:0] value;
                } raw_mode_out_data_fifo;
            } RAW_MODE_OUT_DATA_FIFO;
            struct {
                struct {
                    logic value;
                } raw_mode_out_en;
            } RAW_MODE_OUT_EN;
            struct {
                struct {
                    logic value;
                } bypass_en;
                struct {
                    logic value;
                } auto_flush_en;
                struct {
                    logic [7:0] value;
                } auto_flush_count;
            } CHANNEL_ALLOC_TX_CFG;
            struct {
                struct {
                    logic value;
                } channel_alloc_tx_ch_en;
            } CHANNEL_ALLOC_TX_CH_EN[38];
            struct {
                struct {
                    logic value;
                } bypass_en;
                struct {
                    logic value;
                } auto_flush_en;
                struct {
                    logic [7:0] value;
                } auto_flush_count;
                struct {
                    logic value;
                } sync_en;
            } CHANNEL_ALLOC_RX_CFG;
            struct {
                struct {
                    logic value;
                } channel_alloc_rx_ch_en;
            } CHANNEL_ALLOC_RX_CH_EN[38];
        } serial_link;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: serial_link_reg.serial_link.CTRL.clk_ena
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.serial_link.CTRL.clk_ena.value;
        load_next_c = '0;
        if(decoded_reg_strb.serial_link.CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.serial_link.CTRL.clk_ena.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.serial_link.CTRL.clk_ena.next = next_c;
        field_combo.serial_link.CTRL.clk_ena.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.serial_link.CTRL.clk_ena.value <= 1'h0;
        end else begin
            if(field_combo.serial_link.CTRL.clk_ena.load_next) begin
                field_storage.serial_link.CTRL.clk_ena.value <= field_combo.serial_link.CTRL.clk_ena.next;
            end
        end
    end
    assign hwif_out.serial_link.CTRL.clk_ena.value = field_storage.serial_link.CTRL.clk_ena.value;
    // Field: serial_link_reg.serial_link.CTRL.reset_n
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.serial_link.CTRL.reset_n.value;
        load_next_c = '0;
        if(decoded_reg_strb.serial_link.CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.serial_link.CTRL.reset_n.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.serial_link.CTRL.reset_n.next = next_c;
        field_combo.serial_link.CTRL.reset_n.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.serial_link.CTRL.reset_n.value <= 1'h1;
        end else begin
            if(field_combo.serial_link.CTRL.reset_n.load_next) begin
                field_storage.serial_link.CTRL.reset_n.value <= field_combo.serial_link.CTRL.reset_n.next;
            end
        end
    end
    assign hwif_out.serial_link.CTRL.reset_n.value = field_storage.serial_link.CTRL.reset_n.value;
    // Field: serial_link_reg.serial_link.CTRL.axi_in_isolate
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.serial_link.CTRL.axi_in_isolate.value;
        load_next_c = '0;
        if(decoded_reg_strb.serial_link.CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.serial_link.CTRL.axi_in_isolate.value & ~decoded_wr_biten[8:8]) | (decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end
        field_combo.serial_link.CTRL.axi_in_isolate.next = next_c;
        field_combo.serial_link.CTRL.axi_in_isolate.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.serial_link.CTRL.axi_in_isolate.value <= 1'h1;
        end else begin
            if(field_combo.serial_link.CTRL.axi_in_isolate.load_next) begin
                field_storage.serial_link.CTRL.axi_in_isolate.value <= field_combo.serial_link.CTRL.axi_in_isolate.next;
            end
        end
    end
    assign hwif_out.serial_link.CTRL.axi_in_isolate.value = field_storage.serial_link.CTRL.axi_in_isolate.value;
    // Field: serial_link_reg.serial_link.CTRL.axi_out_isolate
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.serial_link.CTRL.axi_out_isolate.value;
        load_next_c = '0;
        if(decoded_reg_strb.serial_link.CTRL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.serial_link.CTRL.axi_out_isolate.value & ~decoded_wr_biten[9:9]) | (decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end
        field_combo.serial_link.CTRL.axi_out_isolate.next = next_c;
        field_combo.serial_link.CTRL.axi_out_isolate.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.serial_link.CTRL.axi_out_isolate.value <= 1'h1;
        end else begin
            if(field_combo.serial_link.CTRL.axi_out_isolate.load_next) begin
                field_storage.serial_link.CTRL.axi_out_isolate.value <= field_combo.serial_link.CTRL.axi_out_isolate.next;
            end
        end
    end
    assign hwif_out.serial_link.CTRL.axi_out_isolate.value = field_storage.serial_link.CTRL.axi_out_isolate.value;

    assign hwif_out.serial_link.ISOLATED.req = !decoded_req_is_wr ? decoded_reg_strb.serial_link.ISOLATED : '0;
    assign hwif_out.serial_link.ISOLATED.req_is_wr = decoded_req_is_wr;
    for(genvar i0=0; i0<38; i0++) begin
        // Field: serial_link_reg.serial_link.TX_PHY_CLK_DIV[].clk_divs
        always_comb begin
            automatic logic [10:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.serial_link.TX_PHY_CLK_DIV[i0].clk_divs.value;
            load_next_c = '0;
            if(decoded_reg_strb.serial_link.TX_PHY_CLK_DIV[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.serial_link.TX_PHY_CLK_DIV[i0].clk_divs.value & ~decoded_wr_biten[10:0]) | (decoded_wr_data[10:0] & decoded_wr_biten[10:0]);
                load_next_c = '1;
            end
            field_combo.serial_link.TX_PHY_CLK_DIV[i0].clk_divs.next = next_c;
            field_combo.serial_link.TX_PHY_CLK_DIV[i0].clk_divs.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge arst_n) begin
            if(~arst_n) begin
                field_storage.serial_link.TX_PHY_CLK_DIV[i0].clk_divs.value <= 11'h8;
            end else begin
                if(field_combo.serial_link.TX_PHY_CLK_DIV[i0].clk_divs.load_next) begin
                    field_storage.serial_link.TX_PHY_CLK_DIV[i0].clk_divs.value <= field_combo.serial_link.TX_PHY_CLK_DIV[i0].clk_divs.next;
                end
            end
        end
        assign hwif_out.serial_link.TX_PHY_CLK_DIV[i0].clk_divs.value = field_storage.serial_link.TX_PHY_CLK_DIV[i0].clk_divs.value;
    end
    for(genvar i0=0; i0<38; i0++) begin
        // Field: serial_link_reg.serial_link.TX_PHY_CLK_START[].clk_divs
        always_comb begin
            automatic logic [10:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.serial_link.TX_PHY_CLK_START[i0].clk_divs.value;
            load_next_c = '0;
            if(decoded_reg_strb.serial_link.TX_PHY_CLK_START[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.serial_link.TX_PHY_CLK_START[i0].clk_divs.value & ~decoded_wr_biten[10:0]) | (decoded_wr_data[10:0] & decoded_wr_biten[10:0]);
                load_next_c = '1;
            end
            field_combo.serial_link.TX_PHY_CLK_START[i0].clk_divs.next = next_c;
            field_combo.serial_link.TX_PHY_CLK_START[i0].clk_divs.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge arst_n) begin
            if(~arst_n) begin
                field_storage.serial_link.TX_PHY_CLK_START[i0].clk_divs.value <= 11'h2;
            end else begin
                if(field_combo.serial_link.TX_PHY_CLK_START[i0].clk_divs.load_next) begin
                    field_storage.serial_link.TX_PHY_CLK_START[i0].clk_divs.value <= field_combo.serial_link.TX_PHY_CLK_START[i0].clk_divs.next;
                end
            end
        end
        assign hwif_out.serial_link.TX_PHY_CLK_START[i0].clk_divs.value = field_storage.serial_link.TX_PHY_CLK_START[i0].clk_divs.value;
    end
    for(genvar i0=0; i0<38; i0++) begin
        // Field: serial_link_reg.serial_link.TX_PHY_CLK_END[].clk_shift_end
        always_comb begin
            automatic logic [10:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.serial_link.TX_PHY_CLK_END[i0].clk_shift_end.value;
            load_next_c = '0;
            if(decoded_reg_strb.serial_link.TX_PHY_CLK_END[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.serial_link.TX_PHY_CLK_END[i0].clk_shift_end.value & ~decoded_wr_biten[10:0]) | (decoded_wr_data[10:0] & decoded_wr_biten[10:0]);
                load_next_c = '1;
            end
            field_combo.serial_link.TX_PHY_CLK_END[i0].clk_shift_end.next = next_c;
            field_combo.serial_link.TX_PHY_CLK_END[i0].clk_shift_end.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge arst_n) begin
            if(~arst_n) begin
                field_storage.serial_link.TX_PHY_CLK_END[i0].clk_shift_end.value <= 11'h6;
            end else begin
                if(field_combo.serial_link.TX_PHY_CLK_END[i0].clk_shift_end.load_next) begin
                    field_storage.serial_link.TX_PHY_CLK_END[i0].clk_shift_end.value <= field_combo.serial_link.TX_PHY_CLK_END[i0].clk_shift_end.next;
                end
            end
        end
        assign hwif_out.serial_link.TX_PHY_CLK_END[i0].clk_shift_end.value = field_storage.serial_link.TX_PHY_CLK_END[i0].clk_shift_end.value;
    end
    // Field: serial_link_reg.serial_link.RAW_MODE_EN.raw_mode_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.serial_link.RAW_MODE_EN.raw_mode_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.serial_link.RAW_MODE_EN && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.serial_link.RAW_MODE_EN.raw_mode_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.serial_link.RAW_MODE_EN.raw_mode_en.next = next_c;
        field_combo.serial_link.RAW_MODE_EN.raw_mode_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.serial_link.RAW_MODE_EN.raw_mode_en.value <= 1'h0;
        end else begin
            if(field_combo.serial_link.RAW_MODE_EN.raw_mode_en.load_next) begin
                field_storage.serial_link.RAW_MODE_EN.raw_mode_en.value <= field_combo.serial_link.RAW_MODE_EN.raw_mode_en.next;
            end
        end
    end
    assign hwif_out.serial_link.RAW_MODE_EN.raw_mode_en.value = field_storage.serial_link.RAW_MODE_EN.raw_mode_en.value;
    // Field: serial_link_reg.serial_link.RAW_MODE_IN_CH_SEL.raw_mode_in_ch_sel
    always_comb begin
        automatic logic [5:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.serial_link.RAW_MODE_IN_CH_SEL.raw_mode_in_ch_sel.value;
        load_next_c = '0;
        if(decoded_reg_strb.serial_link.RAW_MODE_IN_CH_SEL && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.serial_link.RAW_MODE_IN_CH_SEL.raw_mode_in_ch_sel.value & ~decoded_wr_biten[5:0]) | (decoded_wr_data[5:0] & decoded_wr_biten[5:0]);
            load_next_c = '1;
        end
        field_combo.serial_link.RAW_MODE_IN_CH_SEL.raw_mode_in_ch_sel.next = next_c;
        field_combo.serial_link.RAW_MODE_IN_CH_SEL.raw_mode_in_ch_sel.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.serial_link.RAW_MODE_IN_CH_SEL.raw_mode_in_ch_sel.value <= 6'h0;
        end else begin
            if(field_combo.serial_link.RAW_MODE_IN_CH_SEL.raw_mode_in_ch_sel.load_next) begin
                field_storage.serial_link.RAW_MODE_IN_CH_SEL.raw_mode_in_ch_sel.value <= field_combo.serial_link.RAW_MODE_IN_CH_SEL.raw_mode_in_ch_sel.next;
            end
        end
    end
    assign hwif_out.serial_link.RAW_MODE_IN_CH_SEL.raw_mode_in_ch_sel.value = field_storage.serial_link.RAW_MODE_IN_CH_SEL.raw_mode_in_ch_sel.value;
    for(genvar i0=0; i0<38; i0++) begin

        assign hwif_out.serial_link.RAW_MODE_IN_DATA_VALID[i0].req = !decoded_req_is_wr ? decoded_reg_strb.serial_link.RAW_MODE_IN_DATA_VALID[i0] : '0;
        assign hwif_out.serial_link.RAW_MODE_IN_DATA_VALID[i0].req_is_wr = decoded_req_is_wr;
    end

    assign hwif_out.serial_link.RAW_MODE_IN_DATA.req = !decoded_req_is_wr ? decoded_reg_strb.serial_link.RAW_MODE_IN_DATA : '0;
    assign hwif_out.serial_link.RAW_MODE_IN_DATA.req_is_wr = decoded_req_is_wr;
    for(genvar i0=0; i0<38; i0++) begin
        // Field: serial_link_reg.serial_link.RAW_MODE_OUT_CH_MASK[].raw_mode_out_ch_mask
        always_comb begin
            automatic logic [0:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.serial_link.RAW_MODE_OUT_CH_MASK[i0].raw_mode_out_ch_mask.value;
            load_next_c = '0;
            if(decoded_reg_strb.serial_link.RAW_MODE_OUT_CH_MASK[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.serial_link.RAW_MODE_OUT_CH_MASK[i0].raw_mode_out_ch_mask.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
                load_next_c = '1;
            end
            field_combo.serial_link.RAW_MODE_OUT_CH_MASK[i0].raw_mode_out_ch_mask.next = next_c;
            field_combo.serial_link.RAW_MODE_OUT_CH_MASK[i0].raw_mode_out_ch_mask.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge arst_n) begin
            if(~arst_n) begin
                field_storage.serial_link.RAW_MODE_OUT_CH_MASK[i0].raw_mode_out_ch_mask.value <= 1'h0;
            end else begin
                if(field_combo.serial_link.RAW_MODE_OUT_CH_MASK[i0].raw_mode_out_ch_mask.load_next) begin
                    field_storage.serial_link.RAW_MODE_OUT_CH_MASK[i0].raw_mode_out_ch_mask.value <= field_combo.serial_link.RAW_MODE_OUT_CH_MASK[i0].raw_mode_out_ch_mask.next;
                end
            end
        end
        assign hwif_out.serial_link.RAW_MODE_OUT_CH_MASK[i0].raw_mode_out_ch_mask.value = field_storage.serial_link.RAW_MODE_OUT_CH_MASK[i0].raw_mode_out_ch_mask.value;
    end
    // Field: serial_link_reg.serial_link.RAW_MODE_OUT_DATA_FIFO.raw_mode_out_data_fifo
    always_comb begin
        automatic logic [15:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.serial_link.RAW_MODE_OUT_DATA_FIFO.raw_mode_out_data_fifo.value;
        load_next_c = '0;
        if(decoded_reg_strb.serial_link.RAW_MODE_OUT_DATA_FIFO && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.serial_link.RAW_MODE_OUT_DATA_FIFO.raw_mode_out_data_fifo.value & ~decoded_wr_biten[15:0]) | (decoded_wr_data[15:0] & decoded_wr_biten[15:0]);
            load_next_c = '1;
        end
        field_combo.serial_link.RAW_MODE_OUT_DATA_FIFO.raw_mode_out_data_fifo.next = next_c;
        field_combo.serial_link.RAW_MODE_OUT_DATA_FIFO.raw_mode_out_data_fifo.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.serial_link.RAW_MODE_OUT_DATA_FIFO.raw_mode_out_data_fifo.value <= 16'h0;
        end else begin
            if(field_combo.serial_link.RAW_MODE_OUT_DATA_FIFO.raw_mode_out_data_fifo.load_next) begin
                field_storage.serial_link.RAW_MODE_OUT_DATA_FIFO.raw_mode_out_data_fifo.value <= field_combo.serial_link.RAW_MODE_OUT_DATA_FIFO.raw_mode_out_data_fifo.next;
            end
        end
    end
    assign hwif_out.serial_link.RAW_MODE_OUT_DATA_FIFO.raw_mode_out_data_fifo.value = field_storage.serial_link.RAW_MODE_OUT_DATA_FIFO.raw_mode_out_data_fifo.value;
    assign hwif_out.serial_link.RAW_MODE_OUT_DATA_FIFO.raw_mode_out_data_fifo.swmod = decoded_reg_strb.serial_link.RAW_MODE_OUT_DATA_FIFO && decoded_req_is_wr && |(decoded_wr_biten[15:0]);

    assign hwif_out.serial_link.RAW_MODE_OUT_DATA_FIFO_CTRL.req = decoded_reg_strb.serial_link.RAW_MODE_OUT_DATA_FIFO_CTRL;
    assign hwif_out.serial_link.RAW_MODE_OUT_DATA_FIFO_CTRL.req_is_wr = decoded_req_is_wr;
    assign hwif_out.serial_link.RAW_MODE_OUT_DATA_FIFO_CTRL.wr_data = decoded_wr_data;
    assign hwif_out.serial_link.RAW_MODE_OUT_DATA_FIFO_CTRL.wr_biten = decoded_wr_biten;
    // Field: serial_link_reg.serial_link.RAW_MODE_OUT_EN.raw_mode_out_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.serial_link.RAW_MODE_OUT_EN.raw_mode_out_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.serial_link.RAW_MODE_OUT_EN && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.serial_link.RAW_MODE_OUT_EN.raw_mode_out_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.serial_link.RAW_MODE_OUT_EN.raw_mode_out_en.next = next_c;
        field_combo.serial_link.RAW_MODE_OUT_EN.raw_mode_out_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.serial_link.RAW_MODE_OUT_EN.raw_mode_out_en.value <= 1'h0;
        end else begin
            if(field_combo.serial_link.RAW_MODE_OUT_EN.raw_mode_out_en.load_next) begin
                field_storage.serial_link.RAW_MODE_OUT_EN.raw_mode_out_en.value <= field_combo.serial_link.RAW_MODE_OUT_EN.raw_mode_out_en.next;
            end
        end
    end
    assign hwif_out.serial_link.RAW_MODE_OUT_EN.raw_mode_out_en.value = field_storage.serial_link.RAW_MODE_OUT_EN.raw_mode_out_en.value;

    assign hwif_out.serial_link.FLOW_CONTROL_FIFO_CLEAR.req = decoded_req_is_wr ? decoded_reg_strb.serial_link.FLOW_CONTROL_FIFO_CLEAR : '0;
    assign hwif_out.serial_link.FLOW_CONTROL_FIFO_CLEAR.req_is_wr = decoded_req_is_wr;
    assign hwif_out.serial_link.FLOW_CONTROL_FIFO_CLEAR.wr_data = decoded_wr_data;
    assign hwif_out.serial_link.FLOW_CONTROL_FIFO_CLEAR.wr_biten = decoded_wr_biten;
    // Field: serial_link_reg.serial_link.CHANNEL_ALLOC_TX_CFG.bypass_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.serial_link.CHANNEL_ALLOC_TX_CFG.bypass_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.serial_link.CHANNEL_ALLOC_TX_CFG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.serial_link.CHANNEL_ALLOC_TX_CFG.bypass_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.serial_link.CHANNEL_ALLOC_TX_CFG.bypass_en.next = next_c;
        field_combo.serial_link.CHANNEL_ALLOC_TX_CFG.bypass_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.serial_link.CHANNEL_ALLOC_TX_CFG.bypass_en.value <= 1'h1;
        end else begin
            if(field_combo.serial_link.CHANNEL_ALLOC_TX_CFG.bypass_en.load_next) begin
                field_storage.serial_link.CHANNEL_ALLOC_TX_CFG.bypass_en.value <= field_combo.serial_link.CHANNEL_ALLOC_TX_CFG.bypass_en.next;
            end
        end
    end
    assign hwif_out.serial_link.CHANNEL_ALLOC_TX_CFG.bypass_en.value = field_storage.serial_link.CHANNEL_ALLOC_TX_CFG.bypass_en.value;
    // Field: serial_link_reg.serial_link.CHANNEL_ALLOC_TX_CFG.auto_flush_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.serial_link.CHANNEL_ALLOC_TX_CFG.auto_flush_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.serial_link.CHANNEL_ALLOC_TX_CFG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.serial_link.CHANNEL_ALLOC_TX_CFG.auto_flush_en.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.serial_link.CHANNEL_ALLOC_TX_CFG.auto_flush_en.next = next_c;
        field_combo.serial_link.CHANNEL_ALLOC_TX_CFG.auto_flush_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.serial_link.CHANNEL_ALLOC_TX_CFG.auto_flush_en.value <= 1'h1;
        end else begin
            if(field_combo.serial_link.CHANNEL_ALLOC_TX_CFG.auto_flush_en.load_next) begin
                field_storage.serial_link.CHANNEL_ALLOC_TX_CFG.auto_flush_en.value <= field_combo.serial_link.CHANNEL_ALLOC_TX_CFG.auto_flush_en.next;
            end
        end
    end
    assign hwif_out.serial_link.CHANNEL_ALLOC_TX_CFG.auto_flush_en.value = field_storage.serial_link.CHANNEL_ALLOC_TX_CFG.auto_flush_en.value;
    // Field: serial_link_reg.serial_link.CHANNEL_ALLOC_TX_CFG.auto_flush_count
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.serial_link.CHANNEL_ALLOC_TX_CFG.auto_flush_count.value;
        load_next_c = '0;
        if(decoded_reg_strb.serial_link.CHANNEL_ALLOC_TX_CFG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.serial_link.CHANNEL_ALLOC_TX_CFG.auto_flush_count.value & ~decoded_wr_biten[15:8]) | (decoded_wr_data[15:8] & decoded_wr_biten[15:8]);
            load_next_c = '1;
        end
        field_combo.serial_link.CHANNEL_ALLOC_TX_CFG.auto_flush_count.next = next_c;
        field_combo.serial_link.CHANNEL_ALLOC_TX_CFG.auto_flush_count.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.serial_link.CHANNEL_ALLOC_TX_CFG.auto_flush_count.value <= 8'h2;
        end else begin
            if(field_combo.serial_link.CHANNEL_ALLOC_TX_CFG.auto_flush_count.load_next) begin
                field_storage.serial_link.CHANNEL_ALLOC_TX_CFG.auto_flush_count.value <= field_combo.serial_link.CHANNEL_ALLOC_TX_CFG.auto_flush_count.next;
            end
        end
    end
    assign hwif_out.serial_link.CHANNEL_ALLOC_TX_CFG.auto_flush_count.value = field_storage.serial_link.CHANNEL_ALLOC_TX_CFG.auto_flush_count.value;
    for(genvar i0=0; i0<38; i0++) begin
        // Field: serial_link_reg.serial_link.CHANNEL_ALLOC_TX_CH_EN[].channel_alloc_tx_ch_en
        always_comb begin
            automatic logic [0:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.serial_link.CHANNEL_ALLOC_TX_CH_EN[i0].channel_alloc_tx_ch_en.value;
            load_next_c = '0;
            if(decoded_reg_strb.serial_link.CHANNEL_ALLOC_TX_CH_EN[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.serial_link.CHANNEL_ALLOC_TX_CH_EN[i0].channel_alloc_tx_ch_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
                load_next_c = '1;
            end
            field_combo.serial_link.CHANNEL_ALLOC_TX_CH_EN[i0].channel_alloc_tx_ch_en.next = next_c;
            field_combo.serial_link.CHANNEL_ALLOC_TX_CH_EN[i0].channel_alloc_tx_ch_en.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge arst_n) begin
            if(~arst_n) begin
                field_storage.serial_link.CHANNEL_ALLOC_TX_CH_EN[i0].channel_alloc_tx_ch_en.value <= 1'h1;
            end else begin
                if(field_combo.serial_link.CHANNEL_ALLOC_TX_CH_EN[i0].channel_alloc_tx_ch_en.load_next) begin
                    field_storage.serial_link.CHANNEL_ALLOC_TX_CH_EN[i0].channel_alloc_tx_ch_en.value <= field_combo.serial_link.CHANNEL_ALLOC_TX_CH_EN[i0].channel_alloc_tx_ch_en.next;
                end
            end
        end
        assign hwif_out.serial_link.CHANNEL_ALLOC_TX_CH_EN[i0].channel_alloc_tx_ch_en.value = field_storage.serial_link.CHANNEL_ALLOC_TX_CH_EN[i0].channel_alloc_tx_ch_en.value;
    end

    assign hwif_out.serial_link.CHANNEL_ALLOC_TX_CTRL.req = decoded_req_is_wr ? decoded_reg_strb.serial_link.CHANNEL_ALLOC_TX_CTRL : '0;
    assign hwif_out.serial_link.CHANNEL_ALLOC_TX_CTRL.req_is_wr = decoded_req_is_wr;
    assign hwif_out.serial_link.CHANNEL_ALLOC_TX_CTRL.wr_data = decoded_wr_data;
    assign hwif_out.serial_link.CHANNEL_ALLOC_TX_CTRL.wr_biten = decoded_wr_biten;
    // Field: serial_link_reg.serial_link.CHANNEL_ALLOC_RX_CFG.bypass_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.serial_link.CHANNEL_ALLOC_RX_CFG.bypass_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.serial_link.CHANNEL_ALLOC_RX_CFG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.serial_link.CHANNEL_ALLOC_RX_CFG.bypass_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.serial_link.CHANNEL_ALLOC_RX_CFG.bypass_en.next = next_c;
        field_combo.serial_link.CHANNEL_ALLOC_RX_CFG.bypass_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.serial_link.CHANNEL_ALLOC_RX_CFG.bypass_en.value <= 1'h1;
        end else begin
            if(field_combo.serial_link.CHANNEL_ALLOC_RX_CFG.bypass_en.load_next) begin
                field_storage.serial_link.CHANNEL_ALLOC_RX_CFG.bypass_en.value <= field_combo.serial_link.CHANNEL_ALLOC_RX_CFG.bypass_en.next;
            end
        end
    end
    assign hwif_out.serial_link.CHANNEL_ALLOC_RX_CFG.bypass_en.value = field_storage.serial_link.CHANNEL_ALLOC_RX_CFG.bypass_en.value;
    // Field: serial_link_reg.serial_link.CHANNEL_ALLOC_RX_CFG.auto_flush_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.serial_link.CHANNEL_ALLOC_RX_CFG.auto_flush_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.serial_link.CHANNEL_ALLOC_RX_CFG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.serial_link.CHANNEL_ALLOC_RX_CFG.auto_flush_en.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.serial_link.CHANNEL_ALLOC_RX_CFG.auto_flush_en.next = next_c;
        field_combo.serial_link.CHANNEL_ALLOC_RX_CFG.auto_flush_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.serial_link.CHANNEL_ALLOC_RX_CFG.auto_flush_en.value <= 1'h1;
        end else begin
            if(field_combo.serial_link.CHANNEL_ALLOC_RX_CFG.auto_flush_en.load_next) begin
                field_storage.serial_link.CHANNEL_ALLOC_RX_CFG.auto_flush_en.value <= field_combo.serial_link.CHANNEL_ALLOC_RX_CFG.auto_flush_en.next;
            end
        end
    end
    assign hwif_out.serial_link.CHANNEL_ALLOC_RX_CFG.auto_flush_en.value = field_storage.serial_link.CHANNEL_ALLOC_RX_CFG.auto_flush_en.value;
    // Field: serial_link_reg.serial_link.CHANNEL_ALLOC_RX_CFG.auto_flush_count
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.serial_link.CHANNEL_ALLOC_RX_CFG.auto_flush_count.value;
        load_next_c = '0;
        if(decoded_reg_strb.serial_link.CHANNEL_ALLOC_RX_CFG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.serial_link.CHANNEL_ALLOC_RX_CFG.auto_flush_count.value & ~decoded_wr_biten[15:8]) | (decoded_wr_data[15:8] & decoded_wr_biten[15:8]);
            load_next_c = '1;
        end
        field_combo.serial_link.CHANNEL_ALLOC_RX_CFG.auto_flush_count.next = next_c;
        field_combo.serial_link.CHANNEL_ALLOC_RX_CFG.auto_flush_count.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.serial_link.CHANNEL_ALLOC_RX_CFG.auto_flush_count.value <= 8'h2;
        end else begin
            if(field_combo.serial_link.CHANNEL_ALLOC_RX_CFG.auto_flush_count.load_next) begin
                field_storage.serial_link.CHANNEL_ALLOC_RX_CFG.auto_flush_count.value <= field_combo.serial_link.CHANNEL_ALLOC_RX_CFG.auto_flush_count.next;
            end
        end
    end
    assign hwif_out.serial_link.CHANNEL_ALLOC_RX_CFG.auto_flush_count.value = field_storage.serial_link.CHANNEL_ALLOC_RX_CFG.auto_flush_count.value;
    // Field: serial_link_reg.serial_link.CHANNEL_ALLOC_RX_CFG.sync_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.serial_link.CHANNEL_ALLOC_RX_CFG.sync_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.serial_link.CHANNEL_ALLOC_RX_CFG && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.serial_link.CHANNEL_ALLOC_RX_CFG.sync_en.value & ~decoded_wr_biten[16:16]) | (decoded_wr_data[16:16] & decoded_wr_biten[16:16]);
            load_next_c = '1;
        end
        field_combo.serial_link.CHANNEL_ALLOC_RX_CFG.sync_en.next = next_c;
        field_combo.serial_link.CHANNEL_ALLOC_RX_CFG.sync_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.serial_link.CHANNEL_ALLOC_RX_CFG.sync_en.value <= 1'h1;
        end else begin
            if(field_combo.serial_link.CHANNEL_ALLOC_RX_CFG.sync_en.load_next) begin
                field_storage.serial_link.CHANNEL_ALLOC_RX_CFG.sync_en.value <= field_combo.serial_link.CHANNEL_ALLOC_RX_CFG.sync_en.next;
            end
        end
    end
    assign hwif_out.serial_link.CHANNEL_ALLOC_RX_CFG.sync_en.value = field_storage.serial_link.CHANNEL_ALLOC_RX_CFG.sync_en.value;

    assign hwif_out.serial_link.CHANNEL_ALLOC_RX_CTRL.req = decoded_req_is_wr ? decoded_reg_strb.serial_link.CHANNEL_ALLOC_RX_CTRL : '0;
    assign hwif_out.serial_link.CHANNEL_ALLOC_RX_CTRL.req_is_wr = decoded_req_is_wr;
    assign hwif_out.serial_link.CHANNEL_ALLOC_RX_CTRL.wr_data = decoded_wr_data;
    assign hwif_out.serial_link.CHANNEL_ALLOC_RX_CTRL.wr_biten = decoded_wr_biten;
    for(genvar i0=0; i0<38; i0++) begin
        // Field: serial_link_reg.serial_link.CHANNEL_ALLOC_RX_CH_EN[].channel_alloc_rx_ch_en
        always_comb begin
            automatic logic [0:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.serial_link.CHANNEL_ALLOC_RX_CH_EN[i0].channel_alloc_rx_ch_en.value;
            load_next_c = '0;
            if(decoded_reg_strb.serial_link.CHANNEL_ALLOC_RX_CH_EN[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.serial_link.CHANNEL_ALLOC_RX_CH_EN[i0].channel_alloc_rx_ch_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
                load_next_c = '1;
            end
            field_combo.serial_link.CHANNEL_ALLOC_RX_CH_EN[i0].channel_alloc_rx_ch_en.next = next_c;
            field_combo.serial_link.CHANNEL_ALLOC_RX_CH_EN[i0].channel_alloc_rx_ch_en.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge arst_n) begin
            if(~arst_n) begin
                field_storage.serial_link.CHANNEL_ALLOC_RX_CH_EN[i0].channel_alloc_rx_ch_en.value <= 1'h1;
            end else begin
                if(field_combo.serial_link.CHANNEL_ALLOC_RX_CH_EN[i0].channel_alloc_rx_ch_en.load_next) begin
                    field_storage.serial_link.CHANNEL_ALLOC_RX_CH_EN[i0].channel_alloc_rx_ch_en.value <= field_combo.serial_link.CHANNEL_ALLOC_RX_CH_EN[i0].channel_alloc_rx_ch_en.next;
                end
            end
        end
        assign hwif_out.serial_link.CHANNEL_ALLOC_RX_CH_EN[i0].channel_alloc_rx_ch_en.value = field_storage.serial_link.CHANNEL_ALLOC_RX_CH_EN[i0].channel_alloc_rx_ch_en.value;
    end

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    always_comb begin
        automatic logic wr_ack;
        wr_ack = '0;
        wr_ack |= hwif_in.serial_link.RAW_MODE_OUT_DATA_FIFO_CTRL.wr_ack;
        wr_ack |= hwif_in.serial_link.FLOW_CONTROL_FIFO_CLEAR.wr_ack;
        wr_ack |= hwif_in.serial_link.CHANNEL_ALLOC_TX_CTRL.wr_ack;
        wr_ack |= hwif_in.serial_link.CHANNEL_ALLOC_RX_CTRL.wr_ack;
        external_wr_ack = wr_ack;
    end
    assign cpuif_wr_ack = external_wr_ack | (decoded_req & decoded_req_is_wr & ~decoded_strb_is_external);
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------
    logic readback_external_rd_ack_c;
    always_comb begin
        automatic logic rd_ack;
        rd_ack = '0;
        rd_ack |= hwif_in.serial_link.ISOLATED.rd_ack;
        for(int i0=0; i0<38; i0++) begin
            rd_ack |= hwif_in.serial_link.RAW_MODE_IN_DATA_VALID[i0].rd_ack;
        end
        rd_ack |= hwif_in.serial_link.RAW_MODE_IN_DATA.rd_ack;
        rd_ack |= hwif_in.serial_link.RAW_MODE_OUT_DATA_FIFO_CTRL.rd_ack;
        readback_external_rd_ack_c = rd_ack;
    end

    logic readback_external_rd_ack;

    assign readback_external_rd_ack = readback_external_rd_ack_c;

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [31:0] readback_array[235];
    assign readback_array[0][0:0] = (decoded_reg_strb.serial_link.CTRL && !decoded_req_is_wr) ? field_storage.serial_link.CTRL.clk_ena.value : '0;
    assign readback_array[0][1:1] = (decoded_reg_strb.serial_link.CTRL && !decoded_req_is_wr) ? field_storage.serial_link.CTRL.reset_n.value : '0;
    assign readback_array[0][7:2] = '0;
    assign readback_array[0][8:8] = (decoded_reg_strb.serial_link.CTRL && !decoded_req_is_wr) ? field_storage.serial_link.CTRL.axi_in_isolate.value : '0;
    assign readback_array[0][9:9] = (decoded_reg_strb.serial_link.CTRL && !decoded_req_is_wr) ? field_storage.serial_link.CTRL.axi_out_isolate.value : '0;
    assign readback_array[0][31:10] = '0;
    assign readback_array[1] = hwif_in.serial_link.ISOLATED.rd_ack ? hwif_in.serial_link.ISOLATED.rd_data : '0;
    for(genvar i0=0; i0<38; i0++) begin
        assign readback_array[i0 * 1 + 2][10:0] = (decoded_reg_strb.serial_link.TX_PHY_CLK_DIV[i0] && !decoded_req_is_wr) ? field_storage.serial_link.TX_PHY_CLK_DIV[i0].clk_divs.value : '0;
        assign readback_array[i0 * 1 + 2][31:11] = '0;
    end
    for(genvar i0=0; i0<38; i0++) begin
        assign readback_array[i0 * 1 + 40][10:0] = (decoded_reg_strb.serial_link.TX_PHY_CLK_START[i0] && !decoded_req_is_wr) ? field_storage.serial_link.TX_PHY_CLK_START[i0].clk_divs.value : '0;
        assign readback_array[i0 * 1 + 40][31:11] = '0;
    end
    for(genvar i0=0; i0<38; i0++) begin
        assign readback_array[i0 * 1 + 78][10:0] = (decoded_reg_strb.serial_link.TX_PHY_CLK_END[i0] && !decoded_req_is_wr) ? field_storage.serial_link.TX_PHY_CLK_END[i0].clk_shift_end.value : '0;
        assign readback_array[i0 * 1 + 78][31:11] = '0;
    end
    for(genvar i0=0; i0<38; i0++) begin
        assign readback_array[i0 * 1 + 116] = hwif_in.serial_link.RAW_MODE_IN_DATA_VALID[i0].rd_ack ? hwif_in.serial_link.RAW_MODE_IN_DATA_VALID[i0].rd_data : '0;
    end
    assign readback_array[154] = hwif_in.serial_link.RAW_MODE_IN_DATA.rd_ack ? hwif_in.serial_link.RAW_MODE_IN_DATA.rd_data : '0;
    assign readback_array[155] = hwif_in.serial_link.RAW_MODE_OUT_DATA_FIFO_CTRL.rd_ack ? hwif_in.serial_link.RAW_MODE_OUT_DATA_FIFO_CTRL.rd_data : '0;
    assign readback_array[156][0:0] = (decoded_reg_strb.serial_link.RAW_MODE_OUT_EN && !decoded_req_is_wr) ? field_storage.serial_link.RAW_MODE_OUT_EN.raw_mode_out_en.value : '0;
    assign readback_array[156][31:1] = '0;
    assign readback_array[157][0:0] = (decoded_reg_strb.serial_link.CHANNEL_ALLOC_TX_CFG && !decoded_req_is_wr) ? field_storage.serial_link.CHANNEL_ALLOC_TX_CFG.bypass_en.value : '0;
    assign readback_array[157][1:1] = (decoded_reg_strb.serial_link.CHANNEL_ALLOC_TX_CFG && !decoded_req_is_wr) ? field_storage.serial_link.CHANNEL_ALLOC_TX_CFG.auto_flush_en.value : '0;
    assign readback_array[157][7:2] = '0;
    assign readback_array[157][15:8] = (decoded_reg_strb.serial_link.CHANNEL_ALLOC_TX_CFG && !decoded_req_is_wr) ? field_storage.serial_link.CHANNEL_ALLOC_TX_CFG.auto_flush_count.value : '0;
    assign readback_array[157][31:16] = '0;
    for(genvar i0=0; i0<38; i0++) begin
        assign readback_array[i0 * 1 + 158][0:0] = (decoded_reg_strb.serial_link.CHANNEL_ALLOC_TX_CH_EN[i0] && !decoded_req_is_wr) ? field_storage.serial_link.CHANNEL_ALLOC_TX_CH_EN[i0].channel_alloc_tx_ch_en.value : '0;
        assign readback_array[i0 * 1 + 158][31:1] = '0;
    end
    assign readback_array[196][0:0] = (decoded_reg_strb.serial_link.CHANNEL_ALLOC_RX_CFG && !decoded_req_is_wr) ? field_storage.serial_link.CHANNEL_ALLOC_RX_CFG.bypass_en.value : '0;
    assign readback_array[196][1:1] = (decoded_reg_strb.serial_link.CHANNEL_ALLOC_RX_CFG && !decoded_req_is_wr) ? field_storage.serial_link.CHANNEL_ALLOC_RX_CFG.auto_flush_en.value : '0;
    assign readback_array[196][7:2] = '0;
    assign readback_array[196][15:8] = (decoded_reg_strb.serial_link.CHANNEL_ALLOC_RX_CFG && !decoded_req_is_wr) ? field_storage.serial_link.CHANNEL_ALLOC_RX_CFG.auto_flush_count.value : '0;
    assign readback_array[196][16:16] = (decoded_reg_strb.serial_link.CHANNEL_ALLOC_RX_CFG && !decoded_req_is_wr) ? field_storage.serial_link.CHANNEL_ALLOC_RX_CFG.sync_en.value : '0;
    assign readback_array[196][31:17] = '0;
    for(genvar i0=0; i0<38; i0++) begin
        assign readback_array[i0 * 1 + 197][0:0] = (decoded_reg_strb.serial_link.CHANNEL_ALLOC_RX_CH_EN[i0] && !decoded_req_is_wr) ? field_storage.serial_link.CHANNEL_ALLOC_RX_CH_EN[i0].channel_alloc_rx_ch_en.value : '0;
        assign readback_array[i0 * 1 + 197][31:1] = '0;
    end

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr & ~decoded_strb_is_external;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<235; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign external_rd_ack = readback_external_rd_ack;
    assign cpuif_rd_ack = readback_done | readback_external_rd_ack;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
