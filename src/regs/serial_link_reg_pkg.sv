// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package serial_link_reg_pkg;

  // Param list
  parameter int NumChannels = 38;
  parameter int Log2NumChannels = 6;
  parameter int NumBits = 16;
  parameter int Log2MaxClkDiv = 10;
  parameter int FlushCounterWidth = 8;
  parameter int Log2RawModeTXFifoDepth = 3;

  // Address widths within the block
  parameter int BlockAw = 9;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
    } clk_ena;
    struct packed {
      logic        q;
    } reset_n;
    struct packed {
      logic        q;
    } axi_in_isolate;
    struct packed {
      logic        q;
    } axi_out_isolate;
  } serial_link_reg2hw_ctrl_reg_t;

  typedef struct packed {
    logic [10:0] q;
  } serial_link_reg2hw_tx_phy_ctrl1_mreg_t;

  typedef struct packed {
    struct packed {
      logic [10:0] q;
    } clk_shift_start;
    struct packed {
      logic [10:0] q;
    } clk_shift_end;
  } serial_link_reg2hw_tx_phy_ctrl2_mreg_t;

  typedef struct packed {
    logic        q;
  } serial_link_reg2hw_raw_mode_en_reg_t;

  typedef struct packed {
    logic [5:0]  q;
  } serial_link_reg2hw_raw_mode_in_ch_sel_reg_t;

  typedef struct packed {
    logic [15:0] q;
    logic        re;
  } serial_link_reg2hw_raw_mode_in_data_reg_t;

  typedef struct packed {
    logic        q;
  } serial_link_reg2hw_raw_mode_out_ch_mask_mreg_t;

  typedef struct packed {
    logic [15:0] q;
    logic        qe;
  } serial_link_reg2hw_raw_mode_out_data_fifo_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } clear;
  } serial_link_reg2hw_raw_mode_out_data_fifo_ctrl_reg_t;

  typedef struct packed {
    logic        q;
  } serial_link_reg2hw_raw_mode_out_en_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } serial_link_reg2hw_flow_control_fifo_clear_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } bypass_en;
    struct packed {
      logic        q;
    } auto_flush_en;
    struct packed {
      logic [7:0]  q;
    } auto_flush_count;
  } serial_link_reg2hw_channel_alloc_tx_cfg_reg_t;

  typedef struct packed {
    logic        q;
  } serial_link_reg2hw_channel_alloc_tx_ch_en_mreg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } clear;
    struct packed {
      logic        q;
      logic        qe;
    } flush;
  } serial_link_reg2hw_channel_alloc_tx_ctrl_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } bypass_en;
    struct packed {
      logic        q;
    } auto_flush_en;
    struct packed {
      logic [7:0]  q;
    } auto_flush_count;
    struct packed {
      logic        q;
    } sync_en;
  } serial_link_reg2hw_channel_alloc_rx_cfg_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } serial_link_reg2hw_channel_alloc_rx_ctrl_reg_t;

  typedef struct packed {
    logic        q;
  } serial_link_reg2hw_channel_alloc_rx_ch_en_mreg_t;

  typedef struct packed {
    struct packed {
      logic        d;
    } axi_in;
    struct packed {
      logic        d;
    } axi_out;
  } serial_link_hw2reg_isolated_reg_t;

  typedef struct packed {
    logic        d;
  } serial_link_hw2reg_raw_mode_in_data_valid_mreg_t;

  typedef struct packed {
    logic [15:0] d;
  } serial_link_hw2reg_raw_mode_in_data_reg_t;

  typedef struct packed {
    struct packed {
      logic [2:0]  d;
    } fill_state;
    struct packed {
      logic        d;
    } is_full;
  } serial_link_hw2reg_raw_mode_out_data_fifo_ctrl_reg_t;

  // Register -> HW type
  typedef struct packed {
    serial_link_reg2hw_ctrl_reg_t ctrl; // [1444:1441]
    serial_link_reg2hw_tx_phy_ctrl1_mreg_t [37:0] tx_phy_ctrl1; // [1440:1023]
    serial_link_reg2hw_tx_phy_ctrl2_mreg_t [37:0] tx_phy_ctrl2; // [1022:187]
    serial_link_reg2hw_raw_mode_en_reg_t raw_mode_en; // [186:186]
    serial_link_reg2hw_raw_mode_in_ch_sel_reg_t raw_mode_in_ch_sel; // [185:180]
    serial_link_reg2hw_raw_mode_in_data_reg_t raw_mode_in_data; // [179:163]
    serial_link_reg2hw_raw_mode_out_ch_mask_mreg_t [37:0] raw_mode_out_ch_mask; // [162:125]
    serial_link_reg2hw_raw_mode_out_data_fifo_reg_t raw_mode_out_data_fifo; // [124:108]
    serial_link_reg2hw_raw_mode_out_data_fifo_ctrl_reg_t raw_mode_out_data_fifo_ctrl; // [107:106]
    serial_link_reg2hw_raw_mode_out_en_reg_t raw_mode_out_en; // [105:105]
    serial_link_reg2hw_flow_control_fifo_clear_reg_t flow_control_fifo_clear; // [104:103]
    serial_link_reg2hw_channel_alloc_tx_cfg_reg_t channel_alloc_tx_cfg; // [102:93]
    serial_link_reg2hw_channel_alloc_tx_ch_en_mreg_t [37:0] channel_alloc_tx_ch_en; // [92:55]
    serial_link_reg2hw_channel_alloc_tx_ctrl_reg_t channel_alloc_tx_ctrl; // [54:51]
    serial_link_reg2hw_channel_alloc_rx_cfg_reg_t channel_alloc_rx_cfg; // [50:40]
    serial_link_reg2hw_channel_alloc_rx_ctrl_reg_t channel_alloc_rx_ctrl; // [39:38]
    serial_link_reg2hw_channel_alloc_rx_ch_en_mreg_t [37:0] channel_alloc_rx_ch_en; // [37:0]
  } serial_link_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    serial_link_hw2reg_isolated_reg_t isolated; // [59:58]
    serial_link_hw2reg_raw_mode_in_data_valid_mreg_t [37:0] raw_mode_in_data_valid; // [57:20]
    serial_link_hw2reg_raw_mode_in_data_reg_t raw_mode_in_data; // [19:4]
    serial_link_hw2reg_raw_mode_out_data_fifo_ctrl_reg_t raw_mode_out_data_fifo_ctrl; // [3:0]
  } serial_link_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] SERIAL_LINK_CTRL_OFFSET = 9'h 0;
  parameter logic [BlockAw-1:0] SERIAL_LINK_ISOLATED_OFFSET = 9'h 4;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_0_OFFSET = 9'h 8;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_1_OFFSET = 9'h c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_2_OFFSET = 9'h 10;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_3_OFFSET = 9'h 14;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_4_OFFSET = 9'h 18;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_5_OFFSET = 9'h 1c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_6_OFFSET = 9'h 20;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_7_OFFSET = 9'h 24;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_8_OFFSET = 9'h 28;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_9_OFFSET = 9'h 2c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_10_OFFSET = 9'h 30;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_11_OFFSET = 9'h 34;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_12_OFFSET = 9'h 38;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_13_OFFSET = 9'h 3c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_14_OFFSET = 9'h 40;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_15_OFFSET = 9'h 44;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_16_OFFSET = 9'h 48;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_17_OFFSET = 9'h 4c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_18_OFFSET = 9'h 50;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_19_OFFSET = 9'h 54;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_20_OFFSET = 9'h 58;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_21_OFFSET = 9'h 5c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_22_OFFSET = 9'h 60;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_23_OFFSET = 9'h 64;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_24_OFFSET = 9'h 68;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_25_OFFSET = 9'h 6c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_26_OFFSET = 9'h 70;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_27_OFFSET = 9'h 74;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_28_OFFSET = 9'h 78;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_29_OFFSET = 9'h 7c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_30_OFFSET = 9'h 80;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_31_OFFSET = 9'h 84;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_32_OFFSET = 9'h 88;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_33_OFFSET = 9'h 8c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_34_OFFSET = 9'h 90;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_35_OFFSET = 9'h 94;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_36_OFFSET = 9'h 98;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL1_37_OFFSET = 9'h 9c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_0_OFFSET = 9'h a0;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_1_OFFSET = 9'h a4;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_2_OFFSET = 9'h a8;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_3_OFFSET = 9'h ac;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_4_OFFSET = 9'h b0;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_5_OFFSET = 9'h b4;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_6_OFFSET = 9'h b8;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_7_OFFSET = 9'h bc;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_8_OFFSET = 9'h c0;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_9_OFFSET = 9'h c4;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_10_OFFSET = 9'h c8;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_11_OFFSET = 9'h cc;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_12_OFFSET = 9'h d0;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_13_OFFSET = 9'h d4;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_14_OFFSET = 9'h d8;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_15_OFFSET = 9'h dc;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_16_OFFSET = 9'h e0;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_17_OFFSET = 9'h e4;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_18_OFFSET = 9'h e8;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_19_OFFSET = 9'h ec;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_20_OFFSET = 9'h f0;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_21_OFFSET = 9'h f4;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_22_OFFSET = 9'h f8;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_23_OFFSET = 9'h fc;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_24_OFFSET = 9'h 100;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_25_OFFSET = 9'h 104;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_26_OFFSET = 9'h 108;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_27_OFFSET = 9'h 10c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_28_OFFSET = 9'h 110;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_29_OFFSET = 9'h 114;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_30_OFFSET = 9'h 118;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_31_OFFSET = 9'h 11c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_32_OFFSET = 9'h 120;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_33_OFFSET = 9'h 124;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_34_OFFSET = 9'h 128;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_35_OFFSET = 9'h 12c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_36_OFFSET = 9'h 130;
  parameter logic [BlockAw-1:0] SERIAL_LINK_TX_PHY_CTRL2_37_OFFSET = 9'h 134;
  parameter logic [BlockAw-1:0] SERIAL_LINK_RAW_MODE_EN_OFFSET = 9'h 138;
  parameter logic [BlockAw-1:0] SERIAL_LINK_RAW_MODE_IN_CH_SEL_OFFSET = 9'h 13c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_OFFSET = 9'h 140;
  parameter logic [BlockAw-1:0] SERIAL_LINK_RAW_MODE_IN_DATA_VALID_1_OFFSET = 9'h 144;
  parameter logic [BlockAw-1:0] SERIAL_LINK_RAW_MODE_IN_DATA_OFFSET = 9'h 148;
  parameter logic [BlockAw-1:0] SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0_OFFSET = 9'h 14c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_RAW_MODE_OUT_CH_MASK_1_OFFSET = 9'h 150;
  parameter logic [BlockAw-1:0] SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_OFFSET = 9'h 154;
  parameter logic [BlockAw-1:0] SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_CTRL_OFFSET = 9'h 158;
  parameter logic [BlockAw-1:0] SERIAL_LINK_RAW_MODE_OUT_EN_OFFSET = 9'h 15c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_FLOW_CONTROL_FIFO_CLEAR_OFFSET = 9'h 160;
  parameter logic [BlockAw-1:0] SERIAL_LINK_CHANNEL_ALLOC_TX_CFG_OFFSET = 9'h 164;
  parameter logic [BlockAw-1:0] SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0_OFFSET = 9'h 168;
  parameter logic [BlockAw-1:0] SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_1_OFFSET = 9'h 16c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_CHANNEL_ALLOC_TX_CTRL_OFFSET = 9'h 170;
  parameter logic [BlockAw-1:0] SERIAL_LINK_CHANNEL_ALLOC_RX_CFG_OFFSET = 9'h 174;
  parameter logic [BlockAw-1:0] SERIAL_LINK_CHANNEL_ALLOC_RX_CTRL_OFFSET = 9'h 178;
  parameter logic [BlockAw-1:0] SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0_OFFSET = 9'h 17c;
  parameter logic [BlockAw-1:0] SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_1_OFFSET = 9'h 180;

  // Reset values for hwext registers and their fields
  parameter logic [1:0] SERIAL_LINK_ISOLATED_RESVAL = 2'h 3;
  parameter logic [0:0] SERIAL_LINK_ISOLATED_AXI_IN_RESVAL = 1'h 1;
  parameter logic [0:0] SERIAL_LINK_ISOLATED_AXI_OUT_RESVAL = 1'h 1;
  parameter logic [31:0] SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0_RESVAL = 32'h 0;
  parameter logic [5:0] SERIAL_LINK_RAW_MODE_IN_DATA_VALID_1_RESVAL = 6'h 0;
  parameter logic [15:0] SERIAL_LINK_RAW_MODE_IN_DATA_RESVAL = 16'h 0;
  parameter logic [31:0] SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_CTRL_RESVAL = 32'h 0;
  parameter logic [2:0] SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_CTRL_FILL_STATE_RESVAL = 3'h 0;
  parameter logic [0:0] SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_CTRL_IS_FULL_RESVAL = 1'h 0;
  parameter logic [0:0] SERIAL_LINK_FLOW_CONTROL_FIFO_CLEAR_RESVAL = 1'h 0;
  parameter logic [0:0] SERIAL_LINK_FLOW_CONTROL_FIFO_CLEAR_FLOW_CONTROL_FIFO_CLEAR_RESVAL = 1'h 0;
  parameter logic [1:0] SERIAL_LINK_CHANNEL_ALLOC_TX_CTRL_RESVAL = 2'h 0;
  parameter logic [0:0] SERIAL_LINK_CHANNEL_ALLOC_RX_CTRL_RESVAL = 1'h 0;

  // Register index
  typedef enum int {
    SERIAL_LINK_CTRL,
    SERIAL_LINK_ISOLATED,
    SERIAL_LINK_TX_PHY_CTRL1_0,
    SERIAL_LINK_TX_PHY_CTRL1_1,
    SERIAL_LINK_TX_PHY_CTRL1_2,
    SERIAL_LINK_TX_PHY_CTRL1_3,
    SERIAL_LINK_TX_PHY_CTRL1_4,
    SERIAL_LINK_TX_PHY_CTRL1_5,
    SERIAL_LINK_TX_PHY_CTRL1_6,
    SERIAL_LINK_TX_PHY_CTRL1_7,
    SERIAL_LINK_TX_PHY_CTRL1_8,
    SERIAL_LINK_TX_PHY_CTRL1_9,
    SERIAL_LINK_TX_PHY_CTRL1_10,
    SERIAL_LINK_TX_PHY_CTRL1_11,
    SERIAL_LINK_TX_PHY_CTRL1_12,
    SERIAL_LINK_TX_PHY_CTRL1_13,
    SERIAL_LINK_TX_PHY_CTRL1_14,
    SERIAL_LINK_TX_PHY_CTRL1_15,
    SERIAL_LINK_TX_PHY_CTRL1_16,
    SERIAL_LINK_TX_PHY_CTRL1_17,
    SERIAL_LINK_TX_PHY_CTRL1_18,
    SERIAL_LINK_TX_PHY_CTRL1_19,
    SERIAL_LINK_TX_PHY_CTRL1_20,
    SERIAL_LINK_TX_PHY_CTRL1_21,
    SERIAL_LINK_TX_PHY_CTRL1_22,
    SERIAL_LINK_TX_PHY_CTRL1_23,
    SERIAL_LINK_TX_PHY_CTRL1_24,
    SERIAL_LINK_TX_PHY_CTRL1_25,
    SERIAL_LINK_TX_PHY_CTRL1_26,
    SERIAL_LINK_TX_PHY_CTRL1_27,
    SERIAL_LINK_TX_PHY_CTRL1_28,
    SERIAL_LINK_TX_PHY_CTRL1_29,
    SERIAL_LINK_TX_PHY_CTRL1_30,
    SERIAL_LINK_TX_PHY_CTRL1_31,
    SERIAL_LINK_TX_PHY_CTRL1_32,
    SERIAL_LINK_TX_PHY_CTRL1_33,
    SERIAL_LINK_TX_PHY_CTRL1_34,
    SERIAL_LINK_TX_PHY_CTRL1_35,
    SERIAL_LINK_TX_PHY_CTRL1_36,
    SERIAL_LINK_TX_PHY_CTRL1_37,
    SERIAL_LINK_TX_PHY_CTRL2_0,
    SERIAL_LINK_TX_PHY_CTRL2_1,
    SERIAL_LINK_TX_PHY_CTRL2_2,
    SERIAL_LINK_TX_PHY_CTRL2_3,
    SERIAL_LINK_TX_PHY_CTRL2_4,
    SERIAL_LINK_TX_PHY_CTRL2_5,
    SERIAL_LINK_TX_PHY_CTRL2_6,
    SERIAL_LINK_TX_PHY_CTRL2_7,
    SERIAL_LINK_TX_PHY_CTRL2_8,
    SERIAL_LINK_TX_PHY_CTRL2_9,
    SERIAL_LINK_TX_PHY_CTRL2_10,
    SERIAL_LINK_TX_PHY_CTRL2_11,
    SERIAL_LINK_TX_PHY_CTRL2_12,
    SERIAL_LINK_TX_PHY_CTRL2_13,
    SERIAL_LINK_TX_PHY_CTRL2_14,
    SERIAL_LINK_TX_PHY_CTRL2_15,
    SERIAL_LINK_TX_PHY_CTRL2_16,
    SERIAL_LINK_TX_PHY_CTRL2_17,
    SERIAL_LINK_TX_PHY_CTRL2_18,
    SERIAL_LINK_TX_PHY_CTRL2_19,
    SERIAL_LINK_TX_PHY_CTRL2_20,
    SERIAL_LINK_TX_PHY_CTRL2_21,
    SERIAL_LINK_TX_PHY_CTRL2_22,
    SERIAL_LINK_TX_PHY_CTRL2_23,
    SERIAL_LINK_TX_PHY_CTRL2_24,
    SERIAL_LINK_TX_PHY_CTRL2_25,
    SERIAL_LINK_TX_PHY_CTRL2_26,
    SERIAL_LINK_TX_PHY_CTRL2_27,
    SERIAL_LINK_TX_PHY_CTRL2_28,
    SERIAL_LINK_TX_PHY_CTRL2_29,
    SERIAL_LINK_TX_PHY_CTRL2_30,
    SERIAL_LINK_TX_PHY_CTRL2_31,
    SERIAL_LINK_TX_PHY_CTRL2_32,
    SERIAL_LINK_TX_PHY_CTRL2_33,
    SERIAL_LINK_TX_PHY_CTRL2_34,
    SERIAL_LINK_TX_PHY_CTRL2_35,
    SERIAL_LINK_TX_PHY_CTRL2_36,
    SERIAL_LINK_TX_PHY_CTRL2_37,
    SERIAL_LINK_RAW_MODE_EN,
    SERIAL_LINK_RAW_MODE_IN_CH_SEL,
    SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0,
    SERIAL_LINK_RAW_MODE_IN_DATA_VALID_1,
    SERIAL_LINK_RAW_MODE_IN_DATA,
    SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0,
    SERIAL_LINK_RAW_MODE_OUT_CH_MASK_1,
    SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO,
    SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_CTRL,
    SERIAL_LINK_RAW_MODE_OUT_EN,
    SERIAL_LINK_FLOW_CONTROL_FIFO_CLEAR,
    SERIAL_LINK_CHANNEL_ALLOC_TX_CFG,
    SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0,
    SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_1,
    SERIAL_LINK_CHANNEL_ALLOC_TX_CTRL,
    SERIAL_LINK_CHANNEL_ALLOC_RX_CFG,
    SERIAL_LINK_CHANNEL_ALLOC_RX_CTRL,
    SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0,
    SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_1
  } serial_link_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] SERIAL_LINK_PERMIT [97] = '{
    4'b 0011, // index[ 0] SERIAL_LINK_CTRL
    4'b 0001, // index[ 1] SERIAL_LINK_ISOLATED
    4'b 0011, // index[ 2] SERIAL_LINK_TX_PHY_CTRL1_0
    4'b 0011, // index[ 3] SERIAL_LINK_TX_PHY_CTRL1_1
    4'b 0011, // index[ 4] SERIAL_LINK_TX_PHY_CTRL1_2
    4'b 0011, // index[ 5] SERIAL_LINK_TX_PHY_CTRL1_3
    4'b 0011, // index[ 6] SERIAL_LINK_TX_PHY_CTRL1_4
    4'b 0011, // index[ 7] SERIAL_LINK_TX_PHY_CTRL1_5
    4'b 0011, // index[ 8] SERIAL_LINK_TX_PHY_CTRL1_6
    4'b 0011, // index[ 9] SERIAL_LINK_TX_PHY_CTRL1_7
    4'b 0011, // index[10] SERIAL_LINK_TX_PHY_CTRL1_8
    4'b 0011, // index[11] SERIAL_LINK_TX_PHY_CTRL1_9
    4'b 0011, // index[12] SERIAL_LINK_TX_PHY_CTRL1_10
    4'b 0011, // index[13] SERIAL_LINK_TX_PHY_CTRL1_11
    4'b 0011, // index[14] SERIAL_LINK_TX_PHY_CTRL1_12
    4'b 0011, // index[15] SERIAL_LINK_TX_PHY_CTRL1_13
    4'b 0011, // index[16] SERIAL_LINK_TX_PHY_CTRL1_14
    4'b 0011, // index[17] SERIAL_LINK_TX_PHY_CTRL1_15
    4'b 0011, // index[18] SERIAL_LINK_TX_PHY_CTRL1_16
    4'b 0011, // index[19] SERIAL_LINK_TX_PHY_CTRL1_17
    4'b 0011, // index[20] SERIAL_LINK_TX_PHY_CTRL1_18
    4'b 0011, // index[21] SERIAL_LINK_TX_PHY_CTRL1_19
    4'b 0011, // index[22] SERIAL_LINK_TX_PHY_CTRL1_20
    4'b 0011, // index[23] SERIAL_LINK_TX_PHY_CTRL1_21
    4'b 0011, // index[24] SERIAL_LINK_TX_PHY_CTRL1_22
    4'b 0011, // index[25] SERIAL_LINK_TX_PHY_CTRL1_23
    4'b 0011, // index[26] SERIAL_LINK_TX_PHY_CTRL1_24
    4'b 0011, // index[27] SERIAL_LINK_TX_PHY_CTRL1_25
    4'b 0011, // index[28] SERIAL_LINK_TX_PHY_CTRL1_26
    4'b 0011, // index[29] SERIAL_LINK_TX_PHY_CTRL1_27
    4'b 0011, // index[30] SERIAL_LINK_TX_PHY_CTRL1_28
    4'b 0011, // index[31] SERIAL_LINK_TX_PHY_CTRL1_29
    4'b 0011, // index[32] SERIAL_LINK_TX_PHY_CTRL1_30
    4'b 0011, // index[33] SERIAL_LINK_TX_PHY_CTRL1_31
    4'b 0011, // index[34] SERIAL_LINK_TX_PHY_CTRL1_32
    4'b 0011, // index[35] SERIAL_LINK_TX_PHY_CTRL1_33
    4'b 0011, // index[36] SERIAL_LINK_TX_PHY_CTRL1_34
    4'b 0011, // index[37] SERIAL_LINK_TX_PHY_CTRL1_35
    4'b 0011, // index[38] SERIAL_LINK_TX_PHY_CTRL1_36
    4'b 0011, // index[39] SERIAL_LINK_TX_PHY_CTRL1_37
    4'b 0011, // index[40] SERIAL_LINK_TX_PHY_CTRL2_0
    4'b 0011, // index[41] SERIAL_LINK_TX_PHY_CTRL2_1
    4'b 0011, // index[42] SERIAL_LINK_TX_PHY_CTRL2_2
    4'b 0011, // index[43] SERIAL_LINK_TX_PHY_CTRL2_3
    4'b 0011, // index[44] SERIAL_LINK_TX_PHY_CTRL2_4
    4'b 0011, // index[45] SERIAL_LINK_TX_PHY_CTRL2_5
    4'b 0011, // index[46] SERIAL_LINK_TX_PHY_CTRL2_6
    4'b 0011, // index[47] SERIAL_LINK_TX_PHY_CTRL2_7
    4'b 0011, // index[48] SERIAL_LINK_TX_PHY_CTRL2_8
    4'b 0011, // index[49] SERIAL_LINK_TX_PHY_CTRL2_9
    4'b 0011, // index[50] SERIAL_LINK_TX_PHY_CTRL2_10
    4'b 0011, // index[51] SERIAL_LINK_TX_PHY_CTRL2_11
    4'b 0011, // index[52] SERIAL_LINK_TX_PHY_CTRL2_12
    4'b 0011, // index[53] SERIAL_LINK_TX_PHY_CTRL2_13
    4'b 0011, // index[54] SERIAL_LINK_TX_PHY_CTRL2_14
    4'b 0011, // index[55] SERIAL_LINK_TX_PHY_CTRL2_15
    4'b 0011, // index[56] SERIAL_LINK_TX_PHY_CTRL2_16
    4'b 0011, // index[57] SERIAL_LINK_TX_PHY_CTRL2_17
    4'b 0011, // index[58] SERIAL_LINK_TX_PHY_CTRL2_18
    4'b 0011, // index[59] SERIAL_LINK_TX_PHY_CTRL2_19
    4'b 0011, // index[60] SERIAL_LINK_TX_PHY_CTRL2_20
    4'b 0011, // index[61] SERIAL_LINK_TX_PHY_CTRL2_21
    4'b 0011, // index[62] SERIAL_LINK_TX_PHY_CTRL2_22
    4'b 0011, // index[63] SERIAL_LINK_TX_PHY_CTRL2_23
    4'b 0011, // index[64] SERIAL_LINK_TX_PHY_CTRL2_24
    4'b 0011, // index[65] SERIAL_LINK_TX_PHY_CTRL2_25
    4'b 0011, // index[66] SERIAL_LINK_TX_PHY_CTRL2_26
    4'b 0011, // index[67] SERIAL_LINK_TX_PHY_CTRL2_27
    4'b 0011, // index[68] SERIAL_LINK_TX_PHY_CTRL2_28
    4'b 0011, // index[69] SERIAL_LINK_TX_PHY_CTRL2_29
    4'b 0011, // index[70] SERIAL_LINK_TX_PHY_CTRL2_30
    4'b 0011, // index[71] SERIAL_LINK_TX_PHY_CTRL2_31
    4'b 0011, // index[72] SERIAL_LINK_TX_PHY_CTRL2_32
    4'b 0011, // index[73] SERIAL_LINK_TX_PHY_CTRL2_33
    4'b 0011, // index[74] SERIAL_LINK_TX_PHY_CTRL2_34
    4'b 0011, // index[75] SERIAL_LINK_TX_PHY_CTRL2_35
    4'b 0011, // index[76] SERIAL_LINK_TX_PHY_CTRL2_36
    4'b 0011, // index[77] SERIAL_LINK_TX_PHY_CTRL2_37
    4'b 0001, // index[78] SERIAL_LINK_RAW_MODE_EN
    4'b 0001, // index[79] SERIAL_LINK_RAW_MODE_IN_CH_SEL
    4'b 1111, // index[80] SERIAL_LINK_RAW_MODE_IN_DATA_VALID_0
    4'b 0001, // index[81] SERIAL_LINK_RAW_MODE_IN_DATA_VALID_1
    4'b 0011, // index[82] SERIAL_LINK_RAW_MODE_IN_DATA
    4'b 1111, // index[83] SERIAL_LINK_RAW_MODE_OUT_CH_MASK_0
    4'b 0001, // index[84] SERIAL_LINK_RAW_MODE_OUT_CH_MASK_1
    4'b 0011, // index[85] SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO
    4'b 1111, // index[86] SERIAL_LINK_RAW_MODE_OUT_DATA_FIFO_CTRL
    4'b 0001, // index[87] SERIAL_LINK_RAW_MODE_OUT_EN
    4'b 0001, // index[88] SERIAL_LINK_FLOW_CONTROL_FIFO_CLEAR
    4'b 0011, // index[89] SERIAL_LINK_CHANNEL_ALLOC_TX_CFG
    4'b 1111, // index[90] SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_0
    4'b 0001, // index[91] SERIAL_LINK_CHANNEL_ALLOC_TX_CH_EN_1
    4'b 0001, // index[92] SERIAL_LINK_CHANNEL_ALLOC_TX_CTRL
    4'b 0111, // index[93] SERIAL_LINK_CHANNEL_ALLOC_RX_CFG
    4'b 0001, // index[94] SERIAL_LINK_CHANNEL_ALLOC_RX_CTRL
    4'b 1111, // index[95] SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_0
    4'b 0001  // index[96] SERIAL_LINK_CHANNEL_ALLOC_RX_CH_EN_1
  };

endpackage

